<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Matters!.</title>
    <link>http://mperry.github.io/</link>
    <atom:link href="http://mperry.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <description>Thoughts on the discipline of software engineering</description>
    <language>en</language>
    <pubDate>27/08/2014 10:11:56 PM</pubDate>
    <lastBuildDate>27/08/2014 10:11:56 PM</lastBuildDate>

      <item>
        <title>Groovy Monads</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2014/08/19/groovy-monads.html</link>
        <pubDate>15/07/2014 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2014/08/19/groovy-monads.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the last two posts, I have discussed how to implement functors and applicatives in Groovy.  This post discusses the related topic of monads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before we start, let&amp;#8217;s review the essence of the differences between these three concepts.  The primary method for functors, applicatives and monads are &lt;em&gt;map&lt;/em&gt;, &lt;em&gt;apply&lt;/em&gt; and &lt;em&gt;flatMap&lt;/em&gt; respectively.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-topbot grid-all&quot; style=&quot;width:60%; &quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Types used for Functor, Applicative and Monad&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width:16%;&quot;&gt;
&lt;col style=&quot;width:16%;&quot;&gt;
&lt;col style=&quot;width:16%;&quot;&gt;
&lt;col style=&quot;width:16%;&quot;&gt;
&lt;col style=&quot;width:16%;&quot;&gt;
&lt;col style=&quot;width:16%;&quot;&gt; 
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Class&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Primary Method&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Argument&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Argument&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Result&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tfoot&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Monad&amp;lt;T&amp;lt;_&amp;gt;&amp;gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;flatMap&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;T&amp;lt;A&amp;gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;F&amp;lt;A, T&amp;lt;B&amp;gt;&amp;gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;T&amp;lt;B&amp;gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tfoot&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Functor&amp;lt;T&amp;lt;_&amp;gt;&amp;gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;map&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;T&amp;lt;A&amp;gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;F&amp;lt;A, B&amp;gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;T&amp;lt;B&amp;gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Applicative&amp;lt;T&amp;lt;_&amp;gt;&amp;gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;apply&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;T&amp;lt;A&amp;gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;T&amp;lt;F&amp;lt;A, B&amp;gt;&amp;gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;T&amp;lt;B&amp;gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the table above, I have used invalid syntax to represent the class to indicate that Functor, Applicative and Monad all take a single generic type argument.  The type argument itself takes a single type argument.  In Groovy, we make do with a lack of higher order types and represent the class without the &amp;lt;_&amp;gt; component, e.g. Functor&amp;lt;T&amp;gt; &lt;a href=&quot;#3&quot;&gt;[3]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We deduce that the differences between the classes in the table are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Functor: apply a function (&lt;em&gt;F&amp;lt;A, B&amp;gt;&lt;/em&gt;) to a contextual value using &lt;em&gt;map&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Applicative: apply a contextual function (&lt;em&gt;T&amp;lt;F&amp;lt;A, B&amp;gt;&amp;gt;&lt;/em&gt;) to a contextual value using &lt;em&gt;apply&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Monad: apply a function that returns a contextual value (&lt;em&gt;F&amp;lt;A, T&amp;lt;B&amp;gt;&amp;gt;&lt;/em&gt;) to a contextual value using &lt;em&gt;flatMap&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We define a Monad class containing two abstract methods &lt;em&gt;unit&lt;/em&gt; and &lt;em&gt;flatMap&lt;/em&gt;.  Monad inherits from the Applicative class, in practice, the two abstract methods &lt;em&gt;unit&lt;/em&gt; and &lt;em&gt;flatMap&lt;/em&gt; are sufficient to implement Functor&amp;#8217;s &lt;em&gt;map&lt;/em&gt; method and Applicative&amp;#8217;s &lt;em&gt;pure&lt;/em&gt; and &lt;em&gt;apply&lt;/em&gt; methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;@TypeChecked
abstract class Monad&amp;lt;M&amp;gt; extends Applicative&amp;lt;M&amp;gt; {
    abstract &amp;lt;B&amp;gt; M&amp;lt;B&amp;gt; unit(B b)
    abstract &amp;lt;A, B&amp;gt; M&amp;lt;B&amp;gt; flatMap(M&amp;lt;A&amp;gt; ma, F&amp;lt;A, M&amp;lt;B&amp;gt;&amp;gt; f)
    // other concrete methods omitted for clarity
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we have done previously for functors and applicatives, let&amp;#8217;s create concrete monads for &lt;em&gt;java.util.List&lt;/em&gt; and &lt;em&gt;fj.data.Option&lt;/em&gt; (we could have done similarly for &lt;em&gt;java.util.Optional&lt;/em&gt;) to build intuition on how these work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;@TypeChecked
class ListMonad extends Monad&amp;lt;List&amp;gt; {

    @Override
    def &amp;lt;A&amp;gt; List&amp;lt;A&amp;gt; unit(A a) {
        [a]
    }

    @Override
    def &amp;lt;A, B&amp;gt; List&amp;lt;B&amp;gt; flatMap(List&amp;lt;A&amp;gt; list, F&amp;lt;A, List&amp;lt;B&amp;gt;&amp;gt; f) {
        def result = new LinkedList&amp;lt;B&amp;gt;()
        for (A a: list) {
            result.addAll(f.f(a))
        }
        result
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;@TypeChecked
class OptionMonad extends Monad&amp;lt;Option&amp;gt; {

    @Override
    def &amp;lt;A&amp;gt; Option&amp;lt;A&amp;gt; unit(A a) {
        Option.some(a)
    }

    @Override
    def &amp;lt;A, B&amp;gt; Option&amp;lt;B&amp;gt; flatMap(Option&amp;lt;A&amp;gt; o, F&amp;lt;A, Option&amp;lt;B&amp;gt;&amp;gt; f) {
        o.isSome() ? f.f(o.some()) : Option.&amp;lt;B&amp;gt;none()
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Conclusion&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bibliography&quot;&gt;Bibliography&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;[1] FunctionalGroovy, &lt;a href=&quot;https://github.com/mperry/functionalgroovy&quot;&gt;https://github.com/mperry/functionalgroovy&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;[2] Functors, Applicatives, And Monads In Pictures, &lt;a href=&quot;http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html&quot;&gt;http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;[3] Groovy Functors, &lt;a href=&quot;http://mperry.github.io/2014/07/01/groovy-functors.html&quot;&gt;http://mperry.github.io/2014/07/01/groovy-functors.html&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Groovy Applicatives</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2014/07/02/groovy-applicatives.html</link>
        <pubDate>02/07/2014 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2014/07/02/groovy-applicatives.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My last post discussed creating &lt;a href=&quot;https://mperry.github.io/2014/07/01/groovy-functors.html&quot;&gt;Functors in Groovy&lt;/a&gt; &lt;a href=&quot;#5&quot;&gt;[5]&lt;/a&gt;.  I demonstrated how to create a list functor.  Before we start creating the applicative abstraction, let&amp;#8217;s create a functor based on the rich &lt;a href=&quot;https://github.com/functionaljava/functionaljava&quot;&gt;FunctionalJava&lt;/a&gt; &lt;a href=&quot;https://functionaljava.ci.cloudbees.com/job/master/javadoc/&quot;&gt;Option&lt;/a&gt; type to review functors and to later demonstrate applicatives.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;@TypeChecked
class OptionFunctor implements Functor&amp;lt;Option&amp;gt; {
    @Override
    def &amp;lt;A, B&amp;gt; Option&amp;lt;B&amp;gt; map(Option&amp;lt;A&amp;gt; o, F&amp;lt;A, B&amp;gt; f) {
        o.map(f)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that I swapped the traditional order of the parameters to map to match Groovy&amp;#8217;s convention of putting the closure as the last parameter of a method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To motivate the example, I will be converting some of the code from the excellent book for FP beginners, Learn You A Haskell &lt;a href=&quot;#2&quot;&gt;[2]&lt;/a&gt;.  When we map over functors, the function we are mapping with takes a single parameter.  Consider the case where a function takes multiple parameters, e.g. multiplication of integers takes two parameters.  To use this to map over a list of integers we curry the multiply function and map the curried function over the list.  This creates a list of functions (list1) where each function takes a single integer parameter and returns an integer.  We can then map over this list with another function that takes the function from the list and applies it to multiply by a number, say three.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;    @Test
    void test1() {
        def listFunctor = new ListFunctor()
        def list1 = listFunctor.map([1, 2, 3], curry({ Integer a, Integer b -&amp;gt; a * b }))
        def list2 = listFunctor.map(list1, { F&amp;lt;Integer, Integer&amp;gt; f -&amp;gt; f.f(3) })
        println list1
        println list2
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This produces the output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;[fj.F2Functions$2$1@4e91d63f, fj.F2Functions$2$1@d4342c2, fj.F2Functions$2$1@2bbf180e]
[3, 6, 9]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With functors, we can&amp;#8217;t combine two functors together.  Consider having a functor of List&amp;lt;F&amp;lt;Integer, Integer&amp;gt;&amp;gt; and a functor of List&amp;lt;Integer&amp;gt; and taking the integer value from the second functor and applying it to the function in the first functor.  However, functors only support mapping over functors with normal functions.  We need to construct a new abstraction that allows us to combine these two abstractions.  This abstraction, called an applicative (or applicative functor), was first described in &lt;a href=&quot;#3&quot;&gt;[3]&lt;/a&gt;.  It will take practice to learn the intuition of the abstraction, so focus on the definition and examples and build intuition through usage.  The Applicative class has two abstract methods (with other concrete methods omitted here):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;@TypeChecked
abstract class Applicative&amp;lt;App&amp;gt; implements Functor&amp;lt;App&amp;gt; {
    abstract &amp;lt;A&amp;gt; App&amp;lt;A&amp;gt; pure(A a)
    abstract &amp;lt;A, B&amp;gt; App&amp;lt;B&amp;gt; apply(App&amp;lt;F&amp;lt;A, B&amp;gt;&amp;gt; a1, App&amp;lt;A&amp;gt; a2)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This could be expressed as a Groovy trait, but the current implementation of Groovy (2.3.3) does not allow this &lt;a href=&quot;#4&quot;&gt;[4]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We define a List applicative to allow us to try our example which we couldn&amp;#8217;t do with functors, we need to define the pure and apply methods from Applicative and the map method from Functor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;@TypeChecked
class ListApplicative extends Applicative&amp;lt;List&amp;gt; {

    @Override
    def &amp;lt;A&amp;gt; List&amp;lt;A&amp;gt; pure(A a) {
        [a]
    }

    @Override
    def &amp;lt;A, B&amp;gt; List&amp;lt;B&amp;gt; apply(List&amp;lt;F&amp;lt;A, B&amp;gt;&amp;gt; fs, List&amp;lt;A&amp;gt; list) {
        fs.flatMap { F&amp;lt;A, B&amp;gt; f -&amp;gt;
            list.map { A a -&amp;gt;
                f.f(a)
            }
        }
    }

    @Override
    def &amp;lt;A, B&amp;gt; List&amp;lt;B&amp;gt; map(List&amp;lt;A&amp;gt; list, F&amp;lt;A, B&amp;gt; f) {
        list.collect(f)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We use the Groovy trick (abuse?) of applying type parameters to the generic type to keep type information as documented in my post on functors &lt;a href=&quot;#5&quot;&gt;[5]&lt;/a&gt;.  Don&amp;#8217;t concern yourself too much with the implementation here, the type signature is the important part of each method.  We can now use the applicative to combine a List&amp;lt;F&amp;lt;Integer,Integer&amp;gt;&amp;gt; and List&amp;lt;Integer&amp;gt;, which we could not do with functors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	@TypeChecked
	class ListApplicativeTest {

		@Test
		void test1() {
			def listFunctor = new ListFunctor()
			def app = new ListApplicative()

			// two examples of the apply method of list applicative
			def list1 = (1..3).toList().map { { Integer a -&amp;gt; 4 + a } as F }
			def list2 = app.apply(list1, [1, 2, 3])
			def list3 = listFunctor.map([1, 2, 3], F2Functions.curry({ Integer a, Integer b -&amp;gt; a * b }))
			def list4 = app.apply(list3, [1, 2, 3])

			println list1
			println list2
			println list3
			println list4
		}
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which produces the output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;[com.github.mperry.fg.typeclass.ListApplicativeTest$_test1_closure1_closure3@21507a04, com.github.mperry.fg.typeclass.ListApplicativeTest$_test1_closure1_closure3@143640d5, com.github.mperry.fg.typeclass.ListApplicativeTest$_test1_closure1_closure3@6295d394]
[5, 6, 7, 5, 6, 7, 5, 6, 7]
[fj.F2Functions$2$1@475e586c, fj.F2Functions$2$1@657c8ad9, fj.F2Functions$2$1@436a4e4b]
[1, 2, 3, 2, 4, 6, 3, 6, 9]&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s define an option applicative to further investigate the applicative abstraction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;@TypeChecked
class OptionApplicative extends Applicative&amp;lt;Option&amp;gt; {

    @Override
    def &amp;lt;A&amp;gt; Option&amp;lt;A&amp;gt; pure(A a) {
        Option.some(a)
    }

    @Override
    def &amp;lt;A, B&amp;gt; Option&amp;lt;B&amp;gt; apply(Option&amp;lt;F&amp;lt;A, B&amp;gt;&amp;gt; optF, Option&amp;lt;A&amp;gt; o) {
        o.flatMap { A a -&amp;gt;
            optF.map { F&amp;lt;A, B&amp;gt; f -&amp;gt;
                f.f(a)
            }
        }
    }

    @Override
    def &amp;lt;A, B&amp;gt; Option&amp;lt;B&amp;gt; map(Option&amp;lt;A&amp;gt; o, F&amp;lt;A, B&amp;gt; f) {
        o.map(f)
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the code below we play with simple, one argument functions with the option applicative.  I then include a more complicated example, where I curry a 3 argument function to produce a single function F&amp;lt;A, F&amp;lt;B, F&amp;lt;C, D&amp;gt;&amp;gt;&amp;gt; and gradually apply options until the final result is obtained.  Note that this can be written more neatly using infix operators.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;    @Test
    void test1() {
        def app = new OptionApplicative()
        F&amp;lt;Integer, Integer&amp;gt; f = { Integer a -&amp;gt; 3 + a } as F
        def o1 = app.apply(some(f), some(10)) // Some(13)
        def o2 = app.apply(some({ Integer a -&amp;gt; 3 + a } as F), some(10)) // Some(13)
        def o3 = app.apply(some(f), none()) // None

        // use the discriminate for quadratic equations: b^2 - 4ac
        F3&amp;lt;Integer, Integer, Integer, Integer&amp;gt; f3 = { Integer a, Integer b, Integer c -&amp;gt; b * b - 4 * a * c } as F3
        def o4 = app.apply(app.apply(app.apply(app.pure(Function.curry(f3)), some(4)), some(5)), some(3)) // Some(-23)
        // note, with infix methods we could have written this more elegantly as:
        // app.pure(Function.curry(f3)) app.apply some(4) app.apply some(5) app.apply some(3)

        println o1
        println o2
        println o3
        println o4
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Some(13)
Some(13)
None
Some(-23)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead of gradually applying applicatives, we can lift the function through the applicative using the method liftA3, defined on Applicative with the type signature&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;def &amp;lt;A, B, C, D&amp;gt; App&amp;lt;D&amp;gt; liftA3(F3&amp;lt;A, B, C, D&amp;gt; f, App&amp;lt;A&amp;gt; apa, App&amp;lt;B&amp;gt; apb, App&amp;lt;C&amp;gt; apc)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We could add a line to the code above to use this method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;    def o5 = app.liftA3(f3, some(4), some(5), some(3)) // some(-23)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can also combine an arbitrary number of applicatives into a single applicative of a list of results of those applicatives.  The method is called &lt;em&gt;sequenceA&lt;/em&gt; (sequence applicative).  It&amp;#8217;s type signature is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	def &amp;lt;A&amp;gt; App&amp;lt;List&amp;lt;A&amp;gt;&amp;gt; sequenceA(List&amp;lt;App&amp;lt;A&amp;gt;&amp;gt; list) { ... }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can then combine various applicatives:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	def app1 = new OptionApplicative()
	def o1 = app1.sequenceA([some(3), some(2), some(1)]) // some([3, 2, 1])
	def o2 = app1.sequenceA([some(3), none(), some(1)]) // none()

	def app2 = new ListApplicative()
	def list1 = app.sequenceA([[1, 2, 3], [4, 5, 6]]) // [[1,4],[1,5],[1,6],[2,4],[2,5],[2,6],[3,4],[3,5],[3,6]]
	def list2 = app.sequenceA([[1,2,3],[4,5,6],[3,4,4],[]]) // []

	[[1, 2, 3], [4, 5, 6]].combinations() // [[1, 4], [2, 4], [3, 4], [1, 5], [2, 5], [3, 5], [1, 6], [2, 6], [3, 6]]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For lists, &lt;em&gt;sequenceA&lt;/em&gt; creates lists of all possible combinations.  This gives the same result (ignoring ordering) that the Groovy default method &lt;em&gt;combinations&lt;/em&gt; on the Collection class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is expected that all applicatives satisfy the following properties (warning: Haskell code ahead):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;identity: pure id &amp;lt;*&amp;gt; u == u&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;composition: pure (.) &amp;lt;*&amp;gt; u &amp;lt;*&amp;gt; v &amp;lt;*&amp;gt; w == u &amp;lt;*&amp;gt; (v &amp;lt;*&amp;gt; w)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;homomorphism: pure f &amp;lt;*&amp;gt; pure x == pure (f x)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;interchange: u &amp;lt;*&amp;gt; pure x == pure (\f &amp;#8594; f x) &amp;lt;*&amp;gt; u
where &amp;lt;*&amp;gt; is the apply method and (.) is function composition.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you grok applicatives you start seeing them everywhere.  If you are familiar with monads, it turns out all monads are also applicatives, so all the monad classes you might be familiar with are also applicatives including:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IO&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tree&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Option&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Software transactional memory (STM)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arrows&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Either (right biased)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bibliography&quot;&gt;Bibliography&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;[1] FunctionalGroovy, &lt;a href=&quot;https://github.com/mperry/functionalgroovy&quot;&gt;https://github.com/mperry/functionalgroovy&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;[2] Learn You A Haskell, &lt;a href=&quot;http://learnyouahaskell.com/&quot;&gt;http://learnyouahaskell.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;[3] &lt;em&gt;Applicative Programming With Effects&lt;/em&gt;, McBride and Paterson, &lt;a href=&quot;http://www.soi.city.ac.uk/~ross/papers/Applicative.pdf&quot;&gt;http://www.soi.city.ac.uk/~ross/papers/Applicative.pdf&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;[4] Generic Groovy traits issue, &lt;a href=&quot;https://github.com/mperry/bug-generic-grooy-traits&quot;&gt;https://github.com/mperry/bug-generic-grooy-traits&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;[5] Groovy Functors, &lt;a href=&quot;https://mperry.github.io/2014/07/01/groovy-functors.html&quot;&gt;https://mperry.github.io/2014/07/01/groovy-functors.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;[6] Groovy typeclasses (includes definition of Functor, Applicative and Monad), &lt;a href=&quot;https://github.com/mperry/functionalgroovy/tree/master/typeclass/src/main/groovy/com/github/mperry/fg/typeclass&quot;&gt;https://github.com/mperry/functionalgroovy/tree/master/typeclass/src/main/groovy/com/github/mperry/fg/typeclass&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;[7] Haskell Applicative Functors, &lt;a href=&quot;http://en.wikibooks.org/wiki/Haskell/Applicative_Functors&quot;&gt;http://en.wikibooks.org/wiki/Haskell/Applicative_Functors&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Groovy Functors</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2014/07/01/groovy-functors.html</link>
        <pubDate>01/07/2014 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2014/07/01/groovy-functors.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Groovy and Java both provide abstractions that allow programmers to transform values within that abstraction.  For example, Groovy provides the collect method on Collections and Java 8 provides the map method on the Stream class.  This pattern is more widely applicable than these classes, however the simple Java type system prevents this idea from being expressed within Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If Java allowed this idea to be expressed it might be expressed as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;public interface Mappable&amp;lt;M&amp;lt;Z&amp;gt;&amp;gt; {
	public M&amp;lt;B&amp;gt; map(M&amp;lt;A&amp;gt; m, F&amp;lt;A, B&amp;gt; f);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here the Mappable interface takes a single generic type parameter M.  The generic type M itself takes a single generic type parameter Z.  However Java does not allow this because Java does not have kinds &lt;a href=&quot;#2&quot;&gt;[2]&lt;/a&gt; that express the constraint that a generic type parameter requires a generic type parameter.  The Java compiler rejects this code with the error message:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Error:(6, 28) java: &amp;gt; expected
Error:(6, 30) java: &amp;lt;identifier&amp;gt; expected
Error:(6, 32) java: &apos;;&apos; expected&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You might try to change the definition of Mappable to remove the type parameter Z:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;public interface Mappable2&amp;lt;M&amp;gt; {
	public M&amp;lt;B&amp;gt; map(M&amp;lt;A&amp;gt; m, F&amp;lt;A, B&amp;gt; f);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The compiler rejects this too because a type parameter cannot be applied to the generic type M:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Error:(10, 32) java: unexpected type
  required: class
  found:    type parameter M
Error:(10, 23) java: unexpected type
  required: class
  found:    type parameter M&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One might simplify this definition further by removing the type parameter to M in map:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;public interface Mappable3&amp;lt;M&amp;gt; {
	public &amp;lt;A, B&amp;gt; M map(M m, F&amp;lt;A, B&amp;gt; f);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This interface can then be implemented (below), losing much of the generic type information:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;public class MappableList implements Mappable3&amp;lt;List&amp;gt; {
	@Override
	public &amp;lt;A, B&amp;gt; List map(List list, F&amp;lt;A, B&amp;gt; f) {
		return null;
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You could try to keep the type information on the map method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;public class MappableList implements Mappable3&amp;lt;List&amp;gt; {
	@Override
	public &amp;lt;A, B&amp;gt; List&amp;lt;B&amp;gt; map(List&amp;lt;A&amp;gt; list, F&amp;lt;A, B&amp;gt; f) {
		return null;
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But the compiler rejects this as not implementing the map method in Mappable3 as the compiler error shows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Error:(9, 8) java: MappableList is not abstract and does not override abstract method &amp;lt;A,B&amp;gt;map(java.util.List,fj.F&amp;lt;A,B&amp;gt;) in com.github.mperry.Mappable3
Error:(11, 9) java: method does not override or implement a method from a supertype&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Groovy allows us to get closer to what we want to express.  Here I use the Functor interface as a synonym for the Mappable interface above.  The term Functor is already established to represent the Mappable interface (inspired from category theory and Haskell).  Groovy 2.3.3 allows us to define the Functor interface as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;@TypeChecked
interface Functor&amp;lt;T&amp;gt; {
    abstract &amp;lt;A, B&amp;gt; T&amp;lt;B&amp;gt; map(F&amp;lt;A, B&amp;gt; f, T&amp;lt;A&amp;gt; fa)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Significantly, the Groovy compiler (incorrectly) allows the generic type parameter to be applied to the type T, e.g. T&amp;lt;A&amp;gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using Intellij to implement the methods of a class implementing the Functor interface allows us to define a List functor to be mapped over:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;@TypeChecked
class ListFunctor implements Functor&amp;lt;List&amp;gt; {
	@Override
	def &amp;lt;A, B&amp;gt; List map(F&amp;lt;A, B&amp;gt; f, List fa) {
		// TODO
		null
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Groovy compiler, however, also allows type parameters to be added to List in the definition of map, whilst also overriding the definition of Functor&amp;#8217;s map (unlike the Java compiler above):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;@TypeChecked
class ListFunctor implements Functor&amp;lt;List&amp;gt; {
	@Override
	def &amp;lt;A, B&amp;gt; List&amp;lt;B&amp;gt; map(F&amp;lt;A, B&amp;gt; f, List&amp;lt;A&amp;gt; list)
		// TODO
		null
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This allows client code to map over lists in a reusable type safe way.  But this does not get us much more than what using the collect method of List gives us (it gives type safety which Groovy Closures do not).  It has shown that Groovy has a workaround for Java&amp;#8217;s lack of kinds (aka higher order types) as implemented in Haskell, Scala, ML and various dependently typed languages (and others).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The presence of this abstraction allows us to build further abstractions based on Functor, in particular Applicative and Monad.  I have implemented this in FunctionalGroovy &lt;a href=&quot;#1&quot;&gt;[1]&lt;/a&gt; and will be exploring this further in the next blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bibliography&quot;&gt;Bibliography&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;[1] FunctionalGroovy, &lt;a href=&quot;https://github.com/mperry/functionalgroovy&quot;&gt;https://github.com/mperry/functionalgroovy&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;[2] Kinds (higher order types), &lt;a href=&quot;http://en.wikipedia.org/wiki/Kind_(type_theory)&quot;&gt;http://en.wikipedia.org/wiki/Kind_(type_theory)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;[3] Scalaz Functor definition, &lt;a href=&quot;https://github.com/scalaz/scalaz/blob/v7.0.1/core/src/main/scala/scalaz/Functor.scala&quot;&gt;https://github.com/scalaz/scalaz/blob/v7.0.1/core/src/main/scala/scalaz/Functor.scala&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;[4] Haskell Functor definition, &lt;a href=&quot;https://hackage.haskell.org/package/base-4.7.0.0/docs/Data-Functor.html&quot;&gt;https://hackage.haskell.org/package/base-4.7.0.0/docs/Data-Functor.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Converting to JBake</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2014/06/16/converting-to-jbake.html</link>
        <pubDate>16/06/2014 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2014/06/16/converting-to-jbake.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This blog is being converted to JBake to allow easier workflow.  As a result, some of the links will not be working, such as Disqus, the RSS feed and others.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please keep this in mind as the conversion takes place.  I am expecting this could take a week (around 2014-06-23).&lt;/p&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks,
Mark&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Folds and Unfolds</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2014/01/21/folds-and-unfolds.html</link>
        <pubDate>21/01/2014 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2014/01/21/folds-and-unfolds.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Erik Meijer &lt;a href=&quot;#4&quot;&gt;[4]&lt;/a&gt; has stated numerous times that &quot;recursion is the &lt;strong&gt;goto&lt;/strong&gt; of functional programming&quot;.  In this post I investigate using folds and unfolds as a replacement for recursion.  The work in this post has been added to &lt;a href=&quot;https://github.com/mperry/functionalgroovy&quot;&gt;FunctionalGroovy&lt;/a&gt; &lt;a href=&quot;#5&quot;&gt;[5]&lt;/a&gt; as a Groovy extension module.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_folding_left&quot;&gt;Folding Left&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s explore some folds in Groovy.  Groovy uses the method &lt;em&gt;inject&lt;/em&gt; for &lt;em&gt;foldLeft&lt;/em&gt; over Java collections.  Let&amp;#8217;s explore the definition of &lt;em&gt;foldLeft&lt;/em&gt;.  A naive implementation using recursion is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	// fold left using recursion

    static &amp;lt;A, B&amp;gt; B foldLeftR(List&amp;lt;A&amp;gt; list, B b, F2&amp;lt;B, A, B&amp;gt; f) {
        foldLeft(list.tail(), f.f(b, list.head()), f)
    }

    static &amp;lt;A, B&amp;gt; B foldLeftR(List&amp;lt;A&amp;gt; list, B b, Closure&amp;lt;B&amp;gt; f) {
    	foldLeft(list.tail(), f.f(b, list.head()), f)
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An example of calling the fold method is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	assertTrue([1, 2, 3].foldLeftR(0) { Integer acc, Integer i -&amp;gt; acc + i } == 6)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An obvious problem with the definition above is that the method uses stack space of size O(n) which is a problem on
the Java Virtual Machine (JVM).  We can demonstrate this by folding over a list with 10000 elements.  We write a test
 to assert that getting the first element of a tuple (a lazy value) that uses the recursive fold left throws a
 &lt;em&gt;StackOverflowError&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;def p = { -&amp;gt;
	(1..max).toList().foldLeftR(0) { Integer acc, Integer i -&amp;gt; acc + i }
} as P1
assertTrue(p.throwsError(StackOverflowError.class))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fold lefts can be easily rewritten as a for loop to avoid the &lt;em&gt;StackOverflowError&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;   static &amp;lt;A, B&amp;gt; B foldLeft(List&amp;lt;A&amp;gt; list, B b, F2&amp;lt;B, A, B&amp;gt; f) {
        def acc = b
        for (A a: list) {
            acc = f.f(acc, a)
        }
        acc
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can now negate the test above to demonstrate that &lt;em&gt;foldLeft&lt;/em&gt; now uses constant stack space and can therefore handle large lists.  Note that a Groovy AST transform &lt;a href=&quot;#3&quot;&gt;[3]&lt;/a&gt; exists to do tail call optimisation (TCO) which may be integrated in Groovy 2.3.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_folding_right&quot;&gt;Folding Right&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Folding right is a trickier beast.  A naive implementation using recursion is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;    static &amp;lt;A, B&amp;gt; B foldRightR(List&amp;lt;A&amp;gt; list, B b, F2&amp;lt;B, A, B&amp;gt; f) {
        list.isEmpty() ? b : f.f(foldRightR(list.tail(), b, f), list.head())
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the recursive call &lt;em&gt;foldRightR&lt;/em&gt; is not in the tail position (the last expression done).  As a result,
we can&amp;#8217;t transform the program by rewriting the function using a loop.  Instead we use a trampoline,
a data structure which represents what to do next &lt;a href=&quot;#1&quot;&gt;[1]&lt;/a&gt; &lt;a href=&quot;#6&quot;&gt;[6]&lt;/a&gt;.  We use the method &lt;em&gt;pure&lt;/em&gt; to indicate that we have completed the computation and &lt;em&gt;suspend&lt;/em&gt; to indicate there is more work to be done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;   static &amp;lt;A, B&amp;gt; Trampoline&amp;lt;B&amp;gt; foldRightTrampoline(List&amp;lt;A&amp;gt; list, B b, F2&amp;lt;A, B, B&amp;gt; f) {
        Trampoline.suspend({ -&amp;gt;
            if (list.empty) {
                Trampoline.pure(b)
            } else {
                def t = list.tail()
                def h = list.head()
                foldRightTrampoline(t, b, f).map(f.curry().f(h))
            }
        } as P1)
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The function returns a trampoline, which when resumed, returns a value of type &lt;em&gt;Either&amp;lt;P1&amp;lt;Trampoline&amp;lt;A&amp;gt;&amp;gt;, A&amp;gt;&lt;/em&gt;, i.e. either another lazy trampoline or the value A itself.  Note that the recursive call to &lt;em&gt;foldRightTrampoline&lt;/em&gt; is now within the suspended trampoline and is not executed with an initial call to &lt;em&gt;foldRightTrampoline&lt;/em&gt;.  The recursive call also has a structurally smaller data structure by using the tail of the original list.  This guarantees that &lt;em&gt;foldRightTrampoline&lt;/em&gt; uses constant stack space and the suspended trampoline will make progress in the recursive case when resumed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The function &lt;em&gt;foldRightTrampoline&lt;/em&gt; returns a Trampoline of B, which we can run to completion with the &lt;em&gt;Trampoline&lt;/em&gt; method &lt;em&gt;run&lt;/em&gt;.  This runs the trampoline in a while loop, repeatedly calling &lt;em&gt;resume&lt;/em&gt;, until we obtain the pure value when the list is empty.  We then define &lt;em&gt;foldRightT&lt;/em&gt; and &lt;em&gt;foldRight&lt;/em&gt; as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;    static &amp;lt;A, B&amp;gt; B foldRightT(List&amp;lt;A&amp;gt; list, B b, F2&amp;lt;B, A, B&amp;gt; f) {
        // Workaround: g is defined explicitly instead of using f.flip because
        // using f.flip causes a StackOverflowError, I did not look into what caused this error, but
        // suspect Closure coercion is the cause
        def g = { A a2, B b2 -&amp;gt;
            f.f(b2, a2)
        } as F2
        foldRightTrampoline(list, b, g).run()
    }

    static &amp;lt;A, B&amp;gt; B foldRight(List&amp;lt;A&amp;gt; list, B b, F2&amp;lt;B, A, B&amp;gt; f) {
    	foldRightT(list, b, f)
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now calling &lt;em&gt;foldRight&lt;/em&gt; over a large list does not blow the stack:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;    @Test
    void foldRightNoOverflow() {
        def high = (Integer) 10 ** 4
        def list = (1..high).toList()
        def val = list.foldRight(0, { Integer acc, Integer i -&amp;gt; acc + i } as F2)
        assertTrue(val == 50005000)
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Trampolines have proven useful to me numerous times to avoid overflowing the stack, e.g. when performing &lt;a href=&quot;../../../2014/01/03/referentially-transparent-io.html&quot;&gt;referentially transparent IO&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_unfold&quot;&gt;Unfold&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The concept of unfolding is closely related to folding: whilst a folding over a list consumes values of the list to produce a single result, unfolding produces a list of values.  Let&amp;#8217;s compare type signatures using my own Haskell like notation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;fold:   List&amp;lt;A&amp;gt; -&amp;gt; B -&amp;gt; F2&amp;lt;B, A, B&amp;gt; -&amp;gt; B
unfold: B -&amp;gt; F&amp;lt;B, Option&amp;lt;P2&amp;lt;A, B&amp;gt;&amp;gt;&amp;gt; -&amp;gt; List&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fold and unfold turn out to be duals &lt;a href=&quot;#7&quot;&gt;[7]&lt;/a&gt;.  &lt;strong&gt;Folds use recursion over the domain using an inductive data type; unfold produces co-inductively defined co-data over the function&amp;#8217;s co-domain using co-recursion&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Groovy type signature supporting both Groovy Closures and FunctionalJava functions is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;static &amp;lt;A, B&amp;gt; List&amp;lt;A&amp;gt; unfold(B b, F&amp;lt;B, Option&amp;lt;P2&amp;lt;A, B&amp;gt;&amp;gt;&amp;gt; f)
static &amp;lt;A, B&amp;gt; List&amp;lt;A&amp;gt; unfold(B b, Closure&amp;lt;Option&amp;lt;P2&amp;lt;A, B&amp;gt;&amp;gt;&amp;gt; f)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A simple example of using unfold to produce a list of integers is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	// produce the list from 1 to 10
    @Test
    void unfold() {
        def max = 10
        def list = List.unfold(1, { Integer seed -&amp;gt;
            seed &amp;gt; max ? none() : some(P.p(seed, seed + 1))
        } as F)
        assertTrue(list == (1..max).toList())
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This example produces a finite list, however this technique works equally well to produce a lazy infinite stream of values.  The example below creates the infinite fibonacci sequence and then takes the first ten elements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;    @Test
    void fib() {
        def s = Stream.unfold(p(1, 1)) { P2&amp;lt;Integer, Integer&amp;gt; p -&amp;gt;
            def low = p._1()
            def high = p._2()
            some(P.p(low, P.p(high, low + high)))
        }
        def list = s.take(10).toJavaList()
        def expected = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
        assertTrue(list == expected)
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post we have explored the implementation of foldLeft and foldRight, both avoided the use of recursion to ensure the use of constant stack space.  We also looked at unfold, the dual of fold, to produce both finite and infinite data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bibliography&quot;&gt;Bibliography&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;[1] &lt;em&gt;Tail Call Elimination in Scala Monads&lt;/em&gt;, &lt;a href=&quot;http://apocalisp.wordpress.com/2011/10/26/tail-call-elimination-in-scala-monads/&quot;&gt;http://apocalisp.wordpress.com/2011/10/26/tail-call-elimination-in-scala-monads/&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;[2] Unfolds (Anamorphisms) on Wikipedia, &lt;a href=&quot;https://en.wikipedia.org/wiki/Unfold_(higher-order_function)&quot;&gt;https://en.wikipedia.org/wiki/Unfold_(higher-order_function)&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;[3] Tail Recursion Optimization with Groovy&amp;#8217;s AST Transformations, &lt;a href=&quot;http://blog.johanneslink.net/2011/02/11/tail-recursion-optimization-with-groovys-ast-transformations/&quot;&gt;http://blog.johanneslink.net/2011/02/11/tail-recursion-optimization-with-groovys-ast-transformations/&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;[4] Erik Meijer, &lt;a href=&quot;https://en.wikipedia.org/wiki/Erik_Meijer_(computer_scientist)&quot;&gt;https://en.wikipedia.org/wiki/Erik_Meijer_(computer_scientist)&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;[5] FunctionalGroovy, &lt;a href=&quot;https://github.com/mperry/functionalgroovy&quot;&gt;https://github.com/mperry/functionalgroovy&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;[6] FunctionalJava Trampoline implementation, &lt;a href=&quot;https://github.com/functionaljava/functionaljava/blob/master/core/src/main/java/fj/control/Trampoline.java&quot;&gt;https://github.com/functionaljava/functionaljava/blob/master/core/src/main/java/fj/control/Trampoline.java&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;[7] Categorical Dual on Wikipedia, &lt;a href=&quot;https://en.wikipedia.org/wiki/Categorical_dual&quot;&gt;https://en.wikipedia.org/wiki/Categorical_dual&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;8&quot;&gt;&lt;/a&gt;[8] Folds and Unfolds All Around Us, &lt;a href=&quot;http://conal.net/talks/folds-and-unfolds.pdf&quot;&gt;http://conal.net/talks/folds-and-unfolds.pdf&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;9&quot;&gt;&lt;/a&gt;[9] Stackless Scala With Free Monads, &lt;a href=&quot;http://blog.higher-order.com/assets/trampolines.pdf&quot;&gt;http://blog.higher-order.com/assets/trampolines.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Referentially Transparent Input/Output in Groovy</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2014/01/03/referentially-transparent-io.html</link>
        <pubDate>03/01/2014 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2014/01/03/referentially-transparent-io.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When learning functional programming, a difficult concept to grasp is how any &quot;actual work&quot; gets done.  That is, if all functions are referentially transparent, then how does the program perform IO (input/output), which is not typically referentially transparent?  Are our functional programs locked out of IO, consigned to calculations without doing useful things like reading from the keyboard, printing to the screen, saving to disk or communicating over a network?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The answer, of course, is no. We create programs so that our entire program is a single IO action that, when run, can perform IO.  Ideally, the program we write never actually runs any IO action, we rely on the runtime environment to run the single IO action representing our program.  Most languages don&amp;#8217;t have this environment; we compromise by making our main method run the single IO action representing the program.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is stated eloquently at &lt;a href=&quot;https://en.wikibooks.org/wiki/Haskell/Simple_input_and_output&quot;&gt;Haskell/Simple input and output&lt;/a&gt;,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The question immediately arises: &quot;how do you &lt;em&gt;run&lt;/em&gt; an action?&quot;. This is something that is left up to the compiler. You cannot actually run an action yourself; instead, a program is, itself, a single action that is run when the compiled program is executed. Thus, the compiler requires that the main  function have type IO (), which means that it is an IO action that returns nothing. The compiled code then executes this action.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are lots of good resources for further information on this topic, including &lt;a href=&quot;#1&quot;&gt;[1]&lt;/a&gt; and &lt;a href=&quot;#2&quot;&gt;[2]&lt;/a&gt;.  Let&amp;#8217;s investigate how this works in practice with an example in a typically impure language like Groovy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_simple_input_output_program&quot;&gt;Simple Input/Output Program&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am going to implement a simple REPL (Read, Eval, Print, Loop) that reads an integer from standard input and prints the square of that integer.  If the line of input is &lt;em&gt;q&lt;/em&gt; the program will quit, if the input is not an integer or &lt;em&gt;q&lt;/em&gt; then an error is printed and we accept further input.  This example was inspired from &lt;a href=&quot;#2&quot;&gt;[2]&lt;/a&gt;, which has a similar program in Scala (Chapter 13, External Effects and I/O).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A simple, typical, imperative solution might be:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;package com.github.mperry.fg

import groovy.transform.TypeChecked

@TypeChecked
class SimpleIODemoImperative {

	String quit = &quot;q&quot;
	String help = &quot;Squaring REPL\nEnter $quit to quit&quot;
	String prompt = &quot;&amp;gt;&quot;

    static void main(def args) {
        def d = new SimpleIODemoImperative()
        d.repl()
    }

    void repl() {
        println(help)
        System.in.withReader { Reader r -&amp;gt;
            def doLoop = true
            while (doLoop) {
                println(prompt)
                def s = r.readLine()
                process(s)
                doLoop = continueLoop(s)
            }
        }
    }

    String squareMessage(Integer n) {
		&quot;square $n = ${n * n}&quot;
	}

	String invalidMessage(String s) {
		&quot;Not an integer: $s&quot;
	}

	Boolean continueLoop(String s) {
		s != quit
	}

	Boolean isQuit(String s) {
		!continueLoop(s)
	}

	Boolean validInput(String s) {
		s.isInteger() || isQuit(s)
	}

	void process(String s) {
		if (!validInput(s)) {
			println(invalidMessage(s))
		}
		if (s.isInteger()) {
			println(squareMessage(s.toInteger()))
		}
	}

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A program run (interactive session) might proceed as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Squaring REPL
Enter q to quit
&amp;gt;
5
square 5 = 25
&amp;gt;
3
square 3 = 9
&amp;gt;
abc
Not an integer: abc
&amp;gt;
q&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main method in this program instantiates the SimpleIODemoImperative class and calls the repl method.  The repl method prints a help message and then enters a loop where the loop:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;prints a prompt&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reads a line of input&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;processes the input, printing the result or an error (or nothing if quitting)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;checks whether the loop should continue&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s transform this program to do referentially transparent IO.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_a_simple_io_type&quot;&gt;A Simple IO Type&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead of reading from or writing to standard input directly, we introduce a type that, when run, will perform this IO effect. When we write output we discard the value we output; for input we represent the type of the input value directly in the SimpleIO type to make the value accessible to other parts of the program.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;import groovy.transform.TypeChecked

@TypeChecked
abstract class SimpleIO&amp;lt;A&amp;gt; {
    abstract A run()
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When run, the BasicIO type will perform the effect and return a value of type A.  For output, we can make this output type be Java&amp;#8217;s Void or Functional Java&amp;#8217;s Unit type &lt;a href=&quot;#3&quot;&gt;[3]&lt;/a&gt;.  Despite being conceptually similar, I find the Unit type much easier to work with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some values that read from and write to standard input and output are as below.  Remind yourself that no IO is done until the &lt;em&gt;run&lt;/em&gt; method is called.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;import fj.Unit
import fj.data.Option
import groovy.transform.TypeChecked;

@TypeChecked
class IOConstants {

	static SimpleIO&amp;lt;String&amp;gt; stdinReadLine() {
		new SimpleIO&amp;lt;String&amp;gt;() {
			String run() {
				System.in.newReader().readLine()
			}
		}
	}

	static SimpleIO&amp;lt;Unit&amp;gt; stdoutWriteLine(final String msg) {
		new SimpleIO&amp;lt;Unit&amp;gt;() {
			Unit run() {
				println(msg)
				Unit.unit()
			}
		}
	}

    static SimpleIO&amp;lt;Unit&amp;gt; empty() {
        new SimpleIO&amp;lt;Unit&amp;gt;() {
            Unit run() {
                Unit.unit()
            }
        }
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An essential method for SimpleIO is to combine two SimpleIO instances that, when run, will perform each sequentially.  Unfortunately the obvious implementation in Groovy does not compile.  When I try to add this to the Groovy SimpleIO class as per below the Groovy compiler gives the error &quot;&lt;em&gt;Groovyc unable to resolve class B&lt;/em&gt;&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;  def &amp;lt;B&amp;gt; SimpleIO&amp;lt;B&amp;gt; append(final SimpleIO&amp;lt;B&amp;gt; io) {
        new SimpleIO&amp;lt;B&amp;gt;() {
            @Override
            B run() {
                SimpleIO.this.run()
                return io.run()
            }
        }
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I was not happy with the suggested solution to workaround this problem with the Groovy compiler, so switched this class from Groovy to Java.  The &lt;em&gt;append&lt;/em&gt; method then becomes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;    public &amp;lt;B&amp;gt; SimpleIO&amp;lt;B&amp;gt; append(final SimpleIO&amp;lt;B&amp;gt; io) {
        return new SimpleIO&amp;lt;B&amp;gt;() {
            @Override
            public B run() {
                SimpleIO.this.run();
                return io.run();
            }
        };
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_constructing_the_referentially_transparent_program&quot;&gt;Constructing the Referentially Transparent Program&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We now have the knowledge to write our program.  We create a SimpleIO action to output the initial help message and a stream of actions representing each loop iteration of our program.  These are then combined to form a single SimpleIO action.  The main method creates this single SimpleIO action and runs it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The sample interactive session shown above (with a slightly enhanced help message) is duplicated below for reference:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;The Spectacular Squaring REPL!
Enter an integer to square or enter q to quit
&amp;gt;
5
square 5 = 25
&amp;gt;
3
square 3 = 9
&amp;gt;
abc
Not an integer: abc
&amp;gt;
q&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We create the initial help message using &quot;&lt;em&gt;IOConstants.stdoutWriteLine(help)&lt;/em&gt;&quot; where &lt;em&gt;help&lt;/em&gt; is a user help message.  An action representing a single interaction loop is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;    SimpleIO&amp;lt;String&amp;gt; interaction() {
        stdoutWriteLine(prompt).append(stdinReadLine()).flatMap1({ String s -&amp;gt;
            invalidMessageIO(s).append(squareIO(s))
        } as F)
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;interaction&lt;/em&gt; function creates an object that will write the prompt(&quot;&amp;gt;&quot;) to standard output and appends the standard input read line action; the resulting expression has the type SimpleIO&amp;lt;String&amp;gt;.  The function to flatMap1 takes the input line as a String and creates a SimpleIO for a (possibly empty) invalid message and appends an action for the squaring message (which could also be empty).  The function &lt;em&gt;flatMap1&lt;/em&gt; is defined as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;    public &amp;lt;B&amp;gt; SimpleIO&amp;lt;A&amp;gt; flatMap1(final F&amp;lt;A, SimpleIO&amp;lt;B&amp;gt;&amp;gt; f) {
        return new SimpleIO&amp;lt;A&amp;gt;() {
            public A run() {
                A a = SimpleIO.this.run();
                f.f(a).run();
                return a;
            }
        };
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;flatMap1&lt;/em&gt; function creates a SimpleIO action that, when run, runs the first SimpleIO&amp;lt;A&amp;gt;, then uses the function argument &lt;em&gt;f&lt;/em&gt; to create a SimpleIO&amp;lt;B&amp;gt; and runs this action, then returns the result of the first action of type A.  By using &lt;em&gt;flatMap1&lt;/em&gt; in the &lt;em&gt;interaction&lt;/em&gt; function in this way we create a SimpleIO&amp;lt;String&amp;gt; where the String is the value read from standard input.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We now have a single IO action for a single loop of interaction, however we need to create a single SimpleIO to represent a sequence of interaction loops.  The following codes does exactly this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;    SimpleIO&amp;lt;Stream&amp;lt;String&amp;gt;&amp;gt; interactionStream() {
        SimpleIO.sequenceWhile(Stream.repeat(interaction()), { String s -&amp;gt; isLoop(s) } as F)
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before explaining this, we need to understand what &lt;em&gt;sequenceWhile&lt;/em&gt; does.  The type signature of &lt;em&gt;sequenceWhile&lt;/em&gt; is interesting:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;    static &amp;lt;A&amp;gt; SimpleIO&amp;lt;Stream&amp;lt;A&amp;gt;&amp;gt; sequenceWhile(final Stream&amp;lt;SimpleIO&amp;lt;A&amp;gt;&amp;gt; stream, final F&amp;lt;A, Boolean&amp;gt; f)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The function &lt;em&gt;sequenceWhile&lt;/em&gt; transforms a stream of IO actions into a single IO action containing the stream of input values whilst the function argument &lt;em&gt;f&lt;/em&gt; returns true.  We pass in a lazy infinite stream into sequenceWhile and use the function argument &lt;em&gt;f&lt;/em&gt; to return an single SimpleIO action with a finite stream of input strings.  The definition of sequenceWhile is beyond the scope of this post.  For more information on a proposal of adding this to the Haskell Control.Monad library see &lt;a href=&quot;#4&quot;&gt;[4]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we have the &lt;em&gt;interactiveStream&lt;/em&gt; function returning a single SimpleIO to do the main interactive loop, the repl and main methods are defined as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;    SimpleIO&amp;lt;Stream&amp;lt;String&amp;gt;&amp;gt; repl() {
        stdoutWriteLine(help).append(interactionStream())
    }

	static void main(def args) {
		def d = new SimpleIODemoFunctional()
		d.repl().run()
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our REPL consists of a single, referentially transparent SimpleIO action representing IO that does nothing until the main method calls run.  Our entire program is referentially transparent.  One might suspect that the &lt;em&gt;main&lt;/em&gt; method is not referentially transparent, but because it is called just once at &quot;the end of the world&quot;, it can be replaced with it&amp;#8217;s definition without affecting program semantics.  That is, no one can observe the effect. This could be enforced if we had an environment that enforced that main returned a single SimpleIO where the runtime environment called &lt;em&gt;run&lt;/em&gt; on our behalf (Haskell!).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_appendix_the_full_program&quot;&gt;Appendix: The Full Program&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The text of the full referentially transparent program is on Github &lt;a href=&quot;#5&quot;&gt;[5]&lt;/a&gt;, the entire SimpleIODemoFunctional class is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;package com.github.mperry.fg

import fj.F
import fj.Unit
import fj.data.Option
import fj.data.Stream
import groovy.transform.TypeChecked

import static com.github.mperry.fg.IOConstants.stdinReadLine
import static com.github.mperry.fg.IOConstants.stdoutWriteLine
import static fj.data.Option.none
import static fj.data.Option.some

@TypeChecked
class SimpleIODemoFunctional {

	final String quit = &quot;q&quot;
	final String help = &quot;The Spectacular Squaring REPL!\nEnter an integer to square or enter $quit to quit&quot;
	final String prompt = &quot;&amp;gt;&quot;

	Option&amp;lt;Integer&amp;gt; toInt(String s) {
		s.isInteger() ? some(s.toInteger()) : none()
	}

	String squareMessage(Integer n) {
		&quot;square $n = ${n * n}&quot;
	}

	Option&amp;lt;SimpleIO&amp;lt;Unit&amp;gt;&amp;gt; squareOptionIO(String s) {
		toInt(s).map { Integer n -&amp;gt;
			stdoutWriteLine(squareMessage(n))
		}
	}

    SimpleIO&amp;lt;Unit&amp;gt; squareIO(String s) {
        squareOptionIO(s).orSome(IOConstants.empty())
    }

    Boolean isLoop(String s) {
        !isQuit(s)
	}

	Boolean isQuit(String s) {
        s == quit
	}

	Boolean validMessage(String s) {
		(s.isInteger() || isQuit(s))
	}

	Option&amp;lt;String&amp;gt; invalidMessage(String s) {
		validMessage(s) ? none() : Option.&amp;lt;String&amp;gt;some(&quot;Not an integer: $s&quot;)
	}

	Option&amp;lt;SimpleIO&amp;lt;Unit&amp;gt;&amp;gt; invalidMessageOptionIO(String s) {
		invalidMessage(s).map { String it -&amp;gt; stdoutWriteLine(it)}
	}

    SimpleIO&amp;lt;Unit&amp;gt; invalidMessageIO(String s) {
        invalidMessageOptionIO(s).orSome(IOConstants.empty())
    }

    SimpleIO&amp;lt;String&amp;gt; interaction() {
        stdoutWriteLine(prompt).append(stdinReadLine()).flatMap1({ String s -&amp;gt;
            invalidMessageIO(s).append(squareIO(s))
        } as F)
    }

    SimpleIO&amp;lt;Stream&amp;lt;String&amp;gt;&amp;gt; interactionStream() {
        SimpleIO.sequenceWhile(Stream.repeat(interaction()), { String s -&amp;gt; isLoop(s) } as F)
    }

    SimpleIO&amp;lt;Stream&amp;lt;String&amp;gt;&amp;gt; repl() {
        stdoutWriteLine(help).append(interactionStream())
    }

	static void main(def args) {
		def d = new SimpleIODemoFunctional()
		d.repl().run()
	}

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bibliography&quot;&gt;Bibliography&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;[1] &lt;em&gt;Tackling the Awkward Squad: monadic input/output, concurrency, exception, and foreign-language calls in Haskell&lt;/em&gt;, &lt;a href=&quot;https://research.microsoft.com/en-us/um/people/simonpj/papers/marktoberdorf/mark.pdf&quot;&gt;https://research.microsoft.com/en-us/um/people/simonpj/papers/marktoberdorf/mark.pdf&lt;/a&gt;, Peyton-Jones, 2010.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;[2] &lt;em&gt;Functional Programming in Scala&lt;/em&gt;, &lt;a href=&quot;http://www.manning.com/bjarnason/&quot;&gt;http://www.manning.com/bjarnason/&lt;/a&gt;, Chiusano and Bjarnason, Early Access Edition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;[3] Functional Java, &lt;a href=&quot;http://functionaljava.org/&quot;&gt;http://functionaljava.org/&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;[4] Proposal to add sequenceWhile to Haskell Monads, &lt;a href=&quot;http://www.haskell.org/pipermail/libraries/2009-May/011602.html&quot;&gt;http://www.haskell.org/pipermail/libraries/2009-May/011602.html&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;[5] SimpleIODemoFunctional, &lt;a href=&quot;https://github.com/mperry/functionalgroovy/blob/master/demo/src/main/groovy/com/github/mperry/fg/SimpleIODemoFunctional.groovy&quot;&gt;https://github.com/mperry/functionalgroovy/blob/master/demo/src/main/groovy/com/github/mperry/fg/SimpleIODemoFunctional.groovy&lt;/a&gt; in the Github FunctionalGroovy project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;[6] FunctionalGroovy, &lt;a href=&quot;https://github.com/mperry/functionalgroovy&quot;&gt;https://github.com/mperry/functionalgroovy&lt;/a&gt; on Github.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Specification Based Testing</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2013/12/09/specification-based-testing.html</link>
        <pubDate>09/12/2013 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2013/12/09/specification-based-testing.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are lots of testing frameworks around for Java and Groovy, mostly around Test Driven Development (TDD) &lt;a href=&quot;#1&quot;&gt;[1]&lt;/a&gt; and Behaviour Driven Development (BDD) &lt;a href=&quot;#2&quot;&gt;[2]&lt;/a&gt;.  These frameworks work by creating a specification through examples [3].  Mainstream development needs these techniques due to a lack of expressive type systems in usage, using tests as a substitute for using types.  More sophisticated languages are using types to limit incorrect values and specification based testing as a technique to achieve more rigorous testing and software quality, mostly using various flavours of Quickcheck &lt;a href=&quot;#5&quot;&gt;[5]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://www.functionaljava.org&quot;&gt;FunctionalJava&lt;/a&gt; provides an automated specification testing framework that is well-designed, but a bit clunky to use.  This is due to Java&amp;#8217;s verbosity when creating functions, although this should be resolved in Java 8.  Using Groovy we can use this library immediately using a simple interface provided by the author&amp;#8217;s FunctionalGroovy &lt;a href=&quot;#4&quot;&gt;[4]&lt;/a&gt; library.  More importantly the technique needs more widespread knowledge and usage.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_example&quot;&gt;Example&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A simple example demonstrates the technique:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	@Test
	void commutes() {
		specAssert { Integer a, Integer b -&amp;gt;
			a + b == b + a
		}
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, the static method specAssert is called from the Specification class and is passed a Groovy closure taking two integers and returns a boolean on whether addition commutes for those arguments (i.e. the argument order on plus can be reversed).  The specAssert method creates a proposition, uses reflection to get the types of the arguments in the closure and uses standard generators for those arguments types to repeatedly test the function.  For n invocations of the closure the proposition will either always be true, or found to be false (if a single invocation is false).  The specAssert method then uses JUnit to assert the proposition is true and prints a summary of the results like so:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;OK, passed 100 tests.&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lets change the specification to one that is obviously false and see what happens:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	@Test
	void subtractionDoesNotCommute1() {
		specAssert { Integer a, Integer b -&amp;gt;
			a - b == b - a
		}
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Falsified after 1 passed test with arguments: &amp;lt;0,1&amp;gt;

java.lang.AssertionError
	at org.junit.Assert.fail(Assert.java:92)
	at org.junit.Assert.assertTrue(Assert.java:43)
	... rest of the stacktrace ...&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This test fails, as expected, but now our entire test suite fails.  This is not what we want.  We want to change the proposition to one that positively asserts that subtraction does not commute, rather than try to show that subtraction commutes.  For anything more than a simple function we create a specification model to pass to the specAssert function.  Here the model describes the function and the truth of that function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	@Test
	void subtractionDoesNotCommute2() {
		specAssert new Model(
				function: { Integer a, Integer b -&amp;gt;
					a - b == b - a
				},
				truth: false
		)
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Running this test now passes with the output below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Falsified after 1 passed test with arguments: &amp;lt;1,0&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_more_examples&quot;&gt;More Examples&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s go through more examples to demonstrate different ways one might create propositions about our software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let us show that naturals commute using Java Integers.  We use Groovy boolean implication to show we don&amp;#8217;t care about Integer values that are not naturals.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	@Test
	void naturalsCommute() {
		specAssert { Integer a, Integer b -&amp;gt;
			(a &amp;gt;= 0 &amp;amp;&amp;amp; b &amp;gt;= 0).implies(a + b == b + a)
		}
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;OK, passed 100 tests.&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is fine, but this test actually cares about the result of the equals method far less than one hundred times because if the first boolean is false, the implication is true.  Let&amp;#8217;s change this so that we actually care about the result of the equals one hundred times.  In the following example we create a precondition function so that we discard data that does not satisfy the precondition that both a and b be greater than or equal to zero.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	@Test
	void naturalsCommuteDiscardInvalid() {
		specAssert new Model(
			pre: some { a, b -&amp;gt; a &amp;gt;= 0 &amp;amp;&amp;amp; b &amp;gt;= 0 },
			function: { Integer a, Integer b -&amp;gt;
				a + b == b + a
			}
		)
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the &quot;some&quot; method here lifts the precondition function into the Option type.  It would be nice to create an interface to remove the need to lift the function into Option, but this is not done yet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This produces the output.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;OK, passed 100 tests (247 discarded).&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From this we can see that 247 out of 347 tests were discarded, which is about 71%.  If this proportion reflects what was ignored in the implication above then we actually only tested the equals about 29 times, when the output seems to indicate there were 100 successful tests.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_questions&quot;&gt;Questions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The two most common questions that I come across after introductory material on this topic is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;handling exceptions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;generating data&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_generating_data&quot;&gt;Generating Data&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;FunctionalJava has lots of built in generators, including the basic Java types String, Boolean, Byte, String, Integer, BigInteger, Decimal, BigDecimal, Calendar, Date, Float, Long and others.  Consider generating data for a total Stack, that is, a Stack that does not return exceptions.  The Stack will have the usual methods, isEmpty, push, pop, size and top.  Where an element may not exist for top and pop, the return type will be Option&amp;lt;T&amp;gt; where the return value may contain no value or the actual value.  For illustration purposes we are going to consider two options to generate random stacks of integers:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Generate an integer n and insert n random integers into an empty stack&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate recursively a stack that is either empty or non-empty&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am going to use the following stack, but the details are not important.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;package com.github.mperry.fg.test.dbc

import fj.data.Option

import static fj.data.Option.none
import static fj.data.Option.some

/**
 * Simple total Stack (returns no exceptions)
 */
class TotalStack&amp;lt;T&amp;gt; {

	List&amp;lt;T&amp;gt; elements

	TotalStack() {
		elements = []
	}

	boolean isEmpty()  {
		elements.isEmpty()
	}

	Option&amp;lt;T&amp;gt; top()  {
		isEmpty() ? none() : some(elements.last())
	}

	int size() {
		elements.size()
	}

	void push(T item)  {
		elements.add(item)
	}

	Option&amp;lt;T&amp;gt; pop()  {
		isEmpty() ? none() : some(elements.pop())
	}

	String toString() {
		elements.toString()
	}

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_non_recursive_stack_generator&quot;&gt;Non-Recursive Stack Generator&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Firstly we define how to obtain an empty stack:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	TotalStack&amp;lt;Integer&amp;gt; empty() {
		new TotalStack&amp;lt;Integer&amp;gt;()
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To generate the number of integers to insert into the stack we bias a selection so that we choose between 0 and 10 integers to insert, biased equally towards 0, 1 and the interval of [2, 10].  We create a list of generators and convert to a FunctionalJava list fj.data.List, an immutable singly linked list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	Gen&amp;lt;Integer&amp;gt; genStackSize() {
		Gen.oneOf([Gen.value(0), Gen.value(1), Gen.choose(2, 10)].toFJList())
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To generate a stack we map over the generator for the stack size, Gen&amp;lt;Integer&amp;gt;, creating random integers to insert.  We now have a method to generate random stacks using looping.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	Gen&amp;lt;TotalStack&amp;lt;Integer&amp;gt;&amp;gt; genStackLoop() {
		genStackSize().map({ Integer n -&amp;gt;
			def s = empty()
			def r = new Random()
			for (int i = 0; i &amp;lt; n; i++) {
				s.push(r.nextInt())
			}
			s
		} as F)
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note here that we coerce the closure to a FunctionalJava function using &quot;as F&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_recursive_stack_generator&quot;&gt;Recursive Stack Generator&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now consider the recursive case.  We create the base case, generating an empty stack like so:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	Gen&amp;lt;TotalStack&amp;lt;Integer&amp;gt;&amp;gt; genEmpty() {
		Gen.value(empty())
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then to generate the inductive case of a non-empty stack we use two methods.  One to generate a non-empty stack and one to generate an arbitrary stack.  These methods are mutually recursive, which makes them non-trivial.  Consider the genStackRecursive method first.  We generate either an empty or non-empty stack and create a generator from this list.  For genNonEmpty we use monadic bind over the generator Gen.  We then map over the general recursive generator for stack, mutating the stack with a push of the integer from the integer generator previously used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	Gen&amp;lt;TotalStack&amp;lt;Integer&amp;gt;&amp;gt; genNonEmpty() {
		Arbitrary.arbInteger.gen.bind({Integer i -&amp;gt;
			genStackRecursive().map({ TotalStack s -&amp;gt;
				s.push(i)
				s
			} as F)
		} as F)
	}

	Gen&amp;lt;TotalStack&amp;lt;Integer&amp;gt;&amp;gt; genStackRecursive() {
		Gen.oneOf([genEmpty(), genNonEmpty()].toFJList())
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It may help to understand genNonEmpty by considering the type of the bind method for a Gen, as seen below:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	// Gen.bind type
	&amp;lt;B&amp;gt; Gen&amp;lt;B&amp;gt; bind(F&amp;lt;A, Gen&amp;lt;B&amp;gt;&amp;gt; f)

	// concrete type when we call this method
	Gen&amp;lt;TotalStack&amp;lt;Integer&amp;gt;&amp;gt; bind(F&amp;lt;Integer, Gen&amp;lt;TotalStack&amp;lt;Integer&amp;gt;&amp;gt;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To test the stack we can then create a test case as seen below. We create a new model, using the default generators producing arbitrary values with the addition of an arbitrary TotalStack.  The function takes a arbitrary stack and arbitrary integer, pushes the integer onto the stack and checks that the value returned by top is as expected.  You may need to check the &quot;Option Javadoc&quot;:http://functionaljava.googlecode.com/svn/artifacts/3.0/javadoc/fj/data/Option.html to understand mapping over the Option returned from top.  The line returns true if the value is in the option and has the expected value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	@Test
	void testPush() {
		[genStackRecursive(), genStackLoop()].each { g -&amp;gt;
			specAssert new Model(
					map: DEFAULT_MAP + [(TotalStack.class): arbitrary(g)],
					function: { TotalStack&amp;lt;Integer&amp;gt; s, Integer i -&amp;gt;
						s.push(i)
						def val = s.top()
						val.map { it == i }.orSome(false)
					}
			)
		}
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_handling_exceptions&quot;&gt;Handling Exceptions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now considering being able to assert that an exception is thrown given certain input conditions.  Lets go back to considering the commutativity of integers over addition and add the complexity of the integers possibly being null.  We create a value of type Arbitrary of Integer that returns an Integer that is potentially null.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	static Arbitrary&amp;lt;Integer&amp;gt; arbNullableInteger() {
		Arbitrary.arbitrary(Gen.oneOf([Gen.value(null), Arbitrary.arbInteger.gen].toFJList()))
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then we when we create the mapping of classes to arbitrary values our function will get possibly null integers.  We call plus for the integers, catching the NullPointerException and return true if either integer was null.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	@Test
	void integersCommuteWithNullPointer() {
		specAssert new Model(
				map: [(Integer.class): Arbitrary.arbNullableInteger()],
				function: { Integer a, Integer b -&amp;gt;
					try {
						a + b == b + a
					} catch (NullPointerException e) {
						(a == null || b == null)
					}
				}
		)
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are other ways of handling abnormal conditions including adding them to the pre-condition function.  Interestingly, it is easy to add a validator to assert that an exception is of a particular type (with no access to the input values).  This has been useful to show that you can use GContracts for Design By Contract (DbC) and use the post-condition with specification based testing as an oracle.  See the code or contact me for an example, perhaps this is a future blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_other_topics&quot;&gt;Other Topics&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I could have used some other examples I have done in the code base including:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Design By Contract&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integer overflow&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List functor laws&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generating arbitrary functions, e.g. from Integer to String.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One interesting question is, can we make this library completely statically typed and convenient?  I think the answer is yes, but my small wrapper library is not at that point yet.  I have some more thinking to do.  It could be the case that adding more methods (combinators) to FunctionalJava will be sufficient to use that interface directly.  Regardless, it is the idea of specification based testing that is of primary importance.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope I have raised your awareness of automated specification based testing techniques and how you can write more rigorous tests of your code.  I think the value of Test Driven Development (TDD) is not the tests, but the construction of the specification for the software.  Specification based testing allows one to focus on constructing the specification whilst also giving a more comprehensive test suite.  All the code is up on GitHub, the FunctionalGroovy library is on the sonatype repository at &lt;a href=&quot;https://oss.sonatype.org/content/groups/public&quot;&gt;https://oss.sonatype.org/content/groups/public&lt;/a&gt; and the gradle dependency is &lt;em&gt;com.github.mperry:functionalgroovy-core:0.3-SNAPSHOT&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bibliography&quot;&gt;Bibliography&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibiography&quot;&gt;
&lt;ul class=&quot;bibiography&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;[1] Test Driven Development, &lt;a href=&quot;https://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;https://en.wikipedia.org/wiki/Test-driven_development&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;[2] Behaviour Driven Development, &lt;a href=&quot;https://en.wikipedia.org/wiki/Behavior-driven_development&quot;&gt;https://en.wikipedia.org/wiki/Behavior-driven_development&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;[3] Specification By Example, &lt;a href=&quot;https://en.wikipedia.org/wiki/Specification_by_example&quot;&gt;https://en.wikipedia.org/wiki/Specification_by_example&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;[4] FunctionalGroovy, &lt;a href=&quot;https://github.com/mperry/functionalgroovy&quot;&gt;https://github.com/mperry/functionalgroovy&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;[5] Quickcheck, &lt;a href=&quot;https://en.wikipedia.org/wiki/QuickCheck&quot;&gt;https://en.wikipedia.org/wiki/QuickCheck&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Groovy Null Handling Using Bind, Comprehensions and Lift</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2013/07/28/groovy-null-handling.html</link>
        <pubDate>28/07/2013 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2013/07/28/groovy-null-handling.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have been using Groovy and Grails for around 2 years now and was consistently frustrated at the lack of fundamental functional programming ideas.  Due to this, one of the first libraries I add in a project is &lt;a href=&quot;http://functionaljava.org/&quot;&gt;Functional Java&lt;/a&gt;.  This has proven a good match.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The primary page of functional programming in Groovy seems to be at &lt;a href=&quot;http://groovy.codehaus.org/Functional+Programming+with+Groovy&quot;&gt;Functional Programming With Groovy&lt;/a&gt;.  This includes some basic usage of Functional Java with Groovy but I think the library needs exposure more widely.  This will also help programmers transition to using functional programming with Java 8 lambdas.  The classes I use most from Functional Java are Stream, Option, Either/Validation, Functions, Tuples (Products) and the automated, specification based testing package, fj.test.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This posts demonstrates using Options instead of nulls, comprehensions and lifting into the Option class.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_simple_functional_java_examples&quot;&gt;Simple Functional Java Examples&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The page &lt;a href=&quot;http://groovy.codehaus.org/Functional+Programming+with+Groovy&quot;&gt;Functional Progamming with Groovy&lt;/a&gt; first lists some simple List processing using FJ (Functional Java) and Groovy.  This requires meta-programming to add new methods to the existing FJ classes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;
import fj.data.Stream

// some metaprogramming to make fj mesh well with Groovy
Stream.metaClass.filter = { Closure c -&amp;gt; delegate.filter(c as fj.F) }
Stream.metaClass.getAt = { n -&amp;gt; delegate.index(n) }
Stream.metaClass.getAt = { Range r -&amp;gt; r.collect{ delegate.index(it) } }
Stream.metaClass.asList = { delegate.toCollection().asList() }

def evens = Stream.range(0).filter{ it % 2 == 0 }
assert evens.take(5).asList() == [0, 2, 4, 6, 8]
assert (8..12).collect{ evens[it] } == [16, 18, 20, 22, 24]
assert evens[3..6] == [6, 8, 10, 12]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the code above uses the &quot;as&quot; keyword to reference the asType method on the Object class added by the Groovy JDK.  We also need to think about where the  metaprogramming above is called from your program.  However, as of version 2.0, Groovy has a better way of adding methods to existing classes using the Groovy Extension Module mechanism.  This allows us to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;add new methods to existing classes directly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eliminate the type conversion using asType&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that with the release of Groovy 2.2, the first beta of which was available 2013/07/15, &lt;a href=&quot;http://docs.codehaus.org/display/GroovyJSR/GEP+12+-+SAM+coercion&quot;&gt;Single Abstract Method Coercion&lt;/a&gt; should further simplify interaction with libraries using functions as first-class values (e.g. FunctionalJava and Java 8).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My library to facilitate interaction with FunctionalJava is called FunctionalGroovy (of course).  The Github home page is &lt;a href=&quot;https://github.com/mperry/functionalgroovy&quot;&gt;Functional Groovy&lt;/a&gt; and the library is publish to the Sonatype Maven repositorites at &lt;a href=&quot;https://oss.sonatype.org/content/groups/public/com/github/mperry/&quot;&gt;https://oss.sonatype.org/content/groups/public/com/github/mperry/&lt;/a&gt;.  For example, putting this text in test.groovy and running from the command line using &quot;groovy test.groovy&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;@GrabResolver(&apos;https://oss.sonatype.org/content/groups/public&apos;)
@Grab(&apos;com.github.mperry:functionalgroovy-core:0.2-SNAPSHOT&apos;)
@Grab(&apos;org.functionaljava:functionaljava:3.1&apos;)

import com.github.mperry.fg.*

1.to(5).each {
    println it
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that it appears this will not work from the GroovyConsole or the IntellijIDEA IDE due to existing  issues (likely due to the classpath).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_coding_with_null&quot;&gt;Coding with Null&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s write some code to illustrate the problem with null and try to avoid further propagating &lt;a href=&quot;http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare&quot;&gt;Hoare&amp;#8217;s billion dollar mistake&lt;/a&gt;.  Consider the case of reading values from a Properties file in Java and using the read values in a computation.  The naive and most commmon implementation to do this will need to handle abnormal cases: the Properties file might not be found or any of the keys may not be present or the value of the key may not be convertible to the expected type.  Let us consider the case where the values should be strings representing integers and we want to perform a function with those integers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many Java/Groovy implementations might be done as per below.  This code is written in Groovy, but should be understandable for Java progammers as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;
	Integer calculateStandard(Properties p) {
		def v1 = p.getProperty(&quot;var1&quot;)
		def v2 = p.getProperty(&quot;var2Missing&quot;)
		try {
			if (v1 == null || v2 == null) {
				return null
			} else {
				def i = Integer.parseInt(v1)
				def j = Integer.parseInt(v2)
				return i * j
			}
		} catch (Exception e) {
			return null
		}
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_problems_with_null&quot;&gt;Problems with Null&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are numerous problems with this implementation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;duplicate calls to getProperty&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;duplicate null checks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;duplicate return null statements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;duplicate parseInt calls&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;clients of this method need to somehow know that the result can be null&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;all clients of this method need to do a null check on the result returned, forcing clients to repeat the same code potentially thousands of times!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The worst problem above, by far, is all clients of the method having to do null checks on the result type.  This is problematic because:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the null check is easily forgotten and if not done might cause program abortion&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;indicating potential null is not indicated by the types involved&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;comments for null check might get out of sync with the code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;clients might be overly conservative and do null check for values that cannot be null, bloating code, creating unnecessary noise and creating potential confusion&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s look at how this can be done better.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_binding_through_option&quot;&gt;Binding through Option&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To start with let&amp;#8217;s change how we get values from a property file to handle the null case in a type-safe way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	@TypeChecked
	Option&amp;lt;String&amp;gt; getStringProperty(Properties p, String key) {
		Option.fromNull(p.getProperty(key))
	}

	@TypeChecked
	Option&amp;lt;Integer&amp;gt; getIntProperty(Properties p, String key) {
		getStringProperty(p, key).bind { String s -&amp;gt;
			!s.isInteger() ? Option.none() : Option.fromNull(s.toInteger())
		}
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Great, now clients clearly know whether the value can be null or not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can now use the null aware methods of the Option class, bind and map, whose type signatures are below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;Option&amp;lt;B&amp;gt; bind(F&amp;lt;A, Option&amp;lt;B&amp;gt;&amp;gt; f)
Option&amp;lt;B&amp;gt; map(F&amp;lt;A, B&amp;gt; f)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The code to read from the Properties file and then use the resulting values of type Option&amp;lt;Integer&amp;gt; becomes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	Option&amp;lt;Integer&amp;gt; calculateWithBind(Properties p) {
		def t = P.p(&quot;var3&quot;, &quot;var4&quot;)
		def t2 = P2.map({ String s -&amp;gt; getIntProperty(p, s)} as F, t)
		def f2 = {Integer a, Integer b -&amp;gt; a * b} as F2
		t2._1().bind { Integer a -&amp;gt;
			t2._2().map { Integer b -&amp;gt;
				f2.f(a, b)
			}
		}
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What is happenning here?  The code uses a type-safe tuple (a FunctionalJava product type, P2) constructed using the overloaded static call to P for the Property keys and map over the String key to get a tuple containing optional Integer values.  We create a function, f2, taking two normal (not null) integer arguments and use Groovy&amp;#8217;s asType method to convert the Closure to a FunctionalJava F2 type.  The code binds the function through the first Option value of the tuple and then maps over the second option structure in the tuple to keep the correct structure for the return type.  If you are new to functional progamming I recommend spending some time understanding the bind and map methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This has some important results.  We have removed duplication from the method calculateStandard to calculateWithBind and made it easier for clients of the method to be correct because null is abstracted into the return type.  Clients can extract the value from the Option using the isSome, some, orSome and other methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This code can also be written another way using Monadic Comprehensions (those types that support both the bind and map methods above).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	Option&amp;lt;Integer&amp;gt; calculateWithComprehension(Properties p) {
		def t = P.p(&quot;var3&quot;, &quot;var4&quot;)
		def t2 = t.map({ String s -&amp;gt; getIntProperty(p, s)} as F, t)
		def f2 = {Integer a, Integer b -&amp;gt; a * b} as F2
		Comprehension.foreach {
			a &amp;lt;&amp;lt; t2._1()
			b &amp;lt;&amp;lt; t2._2()
			yield { f2.f(a, b) }
		}
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Only the last few lines here have changed.  Instead of calling bind on the option, the code now has a comprehension to bind over the values in the tuple t2.  We calculate the result in the same way.  The potentially suprising part of this is that the foreach comprehension is implemented in exactly the same way as calculateWithBind above.  That is each leftShift method (&amp;lt;&amp;lt;) except the last is translated to a bind call, with the last &amp;lt;&amp;lt; translated to a call to map being passed the function call in the yield.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_lifting&quot;&gt;Lifting&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What is not commonly shown for Functional Programming in Groovy is type-safe nulls which can be handled by lifting the function into the Option type so that we don&amp;#8217;t need to bind/map over the values for the function.  We use the method liftM2 in Option added by FunctionalGroovy which transforms a function from a two argument function taking A and B and returning a C and returning a new function taking arguments of generic type Option and returning an Option.  It&amp;#8217;s type signature is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	static &amp;lt;A, B, C&amp;gt; F2&amp;lt;Option&amp;lt;A&amp;gt;, Option&amp;lt;B&amp;gt;, Option&amp;lt;C&amp;gt;&amp;gt; liftM2(F2&amp;lt;A, B, C&amp;gt; f2) {
		null // TODO: implementation
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We then call this function with our Option values from the tuple t2 and we are done (as an aside, note that FunctionalJava already has a liftM2 method using a curried, two argument function).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	Option&amp;lt;Integer&amp;gt; calculateOptionLift(Properties p) {
		def t = P.p(&quot;var3&quot;, &quot;var4&quot;)
		def t2 = P2.map({ String s -&amp;gt; getIntProperty(p, s)} as F, t)
		def f2 = {Integer a, Integer b -&amp;gt; a * b} as F2
		Option.liftM2(f2).f(t2._1(), t2._2())
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again, the code has not changed exception for the last line where the function f2 is lifted into the Option class and the resulting function called with the two Option values.  The magic here happens with the method liftM2.  Take a second look at it&amp;#8217;s type signature below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;	static &amp;lt;A, B, C&amp;gt; F2&amp;lt;Option&amp;lt;A&amp;gt;, Option&amp;lt;B&amp;gt;, Option&amp;lt;C&amp;gt;&amp;gt; liftM2(F2&amp;lt;A, B, C&amp;gt; f2) {
		// TODO: implementation
	}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is really convenient, we write a function with normal Integers arguments and ignore the presence of potential abnormal cases.  When we lift our function into the Option class the function returned already knows how to handle nulls!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is quite alot of abstraction involved here and despite Groovy&amp;#8217;s many pain points we have managed to turn some ugly legacy code into quite an elegant solution.  When code has to deal with a null from a library, create an abstraction (usually Option) dealing with the null that calls and handles any null parameters and returned values.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bibliography&quot;&gt;Bibliography&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;FunctionalGroovy, &lt;a href=&quot;https://github.com/mperry/functionalgroovy&quot;&gt;https://github.com/mperry/functionalgroovy&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FunctionalJava, &lt;a href=&quot;http://functionaljava.org/&quot;&gt;http://functionaljava.org/&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scala For Comprehension, &lt;a href=&quot;https://adamwojtuniak.wordpress.com/2010/09/24/scala-for-comprehensions/&quot;&gt;https://adamwojtuniak.wordpress.com/2010/09/24/scala-for-comprehensions/&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functional Scala, Comprehending Comprehensions, &lt;a href=&quot;https://gleichmann.wordpress.com/2010/11/21/functional-scala-comprehending-comprehensions/&quot;&gt;https://gleichmann.wordpress.com/2010/11/21/functional-scala-comprehending-comprehensions/&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Haskell List Comprehensions, &lt;a href=&quot;http://www.haskell.org/haskellwiki/List_comprehension&quot;&gt;http://www.haskell.org/haskellwiki/List_comprehension&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Null References, The Billion Dollar Mistake, &lt;a href=&quot;http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare&quot;&gt;http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Option Type, &lt;a href=&quot;http://en.wikipedia.org/wiki/Option_type&quot;&gt;http://en.wikipedia.org/wiki/Option_type&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Early Software Estimation</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2012/11/12/early-software-estimation.html</link>
        <pubDate>12/11/2012 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2012/11/12/early-software-estimation.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Early estimates of schedule, resourcing and cost are generally required for most software projects.  Despite it&amp;#8217;s criticality to successful project completion, software estimation is most often done poorly, often arbitrarily.  How can this be improved for early project estimation?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Despite many years of research into the topic, many (probably most) project exceed their budget and schedule.  According to Capers Jones &lt;a href=&quot;#1&quot;&gt;[1]&lt;/a&gt;, data shows that many projects whose size is about 1000 function points are delayed or cancelled (38%).  For those projects around 10K FP most projects are delayed or cancelled (72%).  See the full table below for the probability of selected outcomes.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width:50%; &quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width:20%;&quot;&gt;
&lt;col style=&quot;width:20%;&quot;&gt;
&lt;col style=&quot;width:20%;&quot;&gt;
&lt;col style=&quot;width:20%;&quot;&gt;
&lt;col style=&quot;width:20%;&quot;&gt; 
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Size (FP)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Early&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;On Time&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Delayed&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cancelled&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;14.68&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;83.16&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.92&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.25&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11.08&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;81.25&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5.67&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.00&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;100&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6.06&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;74.77&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11.83&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7.33&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1,000&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.24&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;60.76&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;17.67&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;20.33&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10,000&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.14&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;28.03&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;23.83&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;48.00&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;100,000&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;0.00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13.67&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;21.33&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;65.00&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Average&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5.53&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;56.94&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13.71&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;23.82&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To understand this table, you will need to know a little about function point conversion into your language of choice.  LOC to FP conversion tables have been published &lt;a href=&quot;#2&quot;&gt;[2]&lt;/a&gt; &lt;a href=&quot;#3&quot;&gt;[3]&lt;/a&gt; &lt;a href=&quot;#4&quot;&gt;[4]&lt;/a&gt;, however using backfiring to produce function point counts is known to not be accurate.  We will accept this restriction for the purpose of this post.  I have published selected values from &lt;a href=&quot;#4&quot;&gt;[4]&lt;/a&gt; below.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width:40%; &quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width:50%;&quot;&gt;
&lt;col style=&quot;width:50%;&quot;&gt; 
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Language&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LOC/FP Mean&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;C&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;128&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;C++&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;53&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Smalltalk&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;21&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SQL&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To make calculations simple, assume the Java/C++ is 50 LOC/FP.  Therefore a 50K LOC Java program is about 1000 FP and about a 60% chance of on time delivery.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most common form of software estimation is still expert based, usually from similar projects from memory or by intuition, often with little evidence to backup the validity of the estimate.  Expert based opinion is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;often wrong&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hard to validate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lessons learned are usually not learned&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Assuming an initial estimate is need early in the project lifecycle, what data can we use to give an estimate that is not required to be precise due to the &lt;a href=&quot;http://www.construx.com/Page.aspx?cid=1648?&quot;&gt;cone of uncertainty&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.construx.com/uploadedImages/Construx/Construx_Content/Resources/Books/Cone01.jpg&quot; alt=&quot;Cone01&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_sizing&quot;&gt;Sizing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Initial software size can be performed by category or analogy.  See my previous post on &lt;a href=&quot;../../../2012/01/02/software-estimation.html&quot;&gt;Fast Software Sizing&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_effort_and_schedule&quot;&gt;Effort and Schedule&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although software estimation is a complex activity based on many factors (the COCOMO model lists more than 20) various rules of thumb can be used early in the project.  Jones&apos; rule of thumb for staff size is the size in FP divided by 150 is the number of personnel for the application.  For our example of 1000 FP, this gives ~6.7 people.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;staff  = FP size / 150&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The schedule is approximated by:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;schedule (months) = FP ^ 0.4&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although 0.4 is the average, web based software uses the exponent of 0.35.  For our example, using 0.35, the schedule is then ~11.2 months.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Staff effort is then calculated by multiply the schedule by the staff size.  For our example this gives 75 staff months.  If we make an assumption that staff cost $72K/year, then the project will cost $450K.  Of course this excludes typical overhead costs and other factors.  The productivity on this project would then be 1000 FP / 75 staff months = 13.3 FP / month.  For comparison, the U.S. average was 13.6 for 1000 FP applications &lt;a href=&quot;#5&quot;&gt;[5]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A word of warning that the staffing in this example is reasonably different than table 3-22 in &lt;a href=&quot;#5&quot;&gt;[5]&lt;/a&gt; where the average staff for a web based application of 1000 FP is 3.9 and schedule is 10 months in table 3-25.  Initially I suspected this would primarily be due to the lower staff size required for web based applciations.  However, table 3-30 in &lt;a href=&quot;#5&quot;&gt;[5]&lt;/a&gt; lists productivity in web based applications to be 25.6 FP/month, almost double the productivity figure of 13.3 given above.  If we use this higher productivity figure then the cost of a 1000 FP web based application is 1000 / 25.6 = 39.1 staff months.  The full table of productivity for various application types of various sizes is given below.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width:50%; &quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width:16%;&quot;&gt;
&lt;col style=&quot;width:16%;&quot;&gt;
&lt;col style=&quot;width:16%;&quot;&gt;
&lt;col style=&quot;width:16%;&quot;&gt;
&lt;col style=&quot;width:16%;&quot;&gt;
&lt;col style=&quot;width:16%;&quot;&gt; 
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Application Type&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;100&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1K&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10K&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;100K&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Average&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;End-user&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;52.60&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;na&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;na&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;na&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;52.60&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Web&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;47.30&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;25.60&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12.00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;na&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;28.30&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MIS&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;21.00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;16.40&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4.65&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.70&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11.19&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;U.S. outsource&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;23.00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;17.20&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4.90&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3.20&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12.08&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Offshore outsource&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;19.00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15.80&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4.70&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3.00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10.63&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Commercial&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11.00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9.30&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4.60&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4.00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7.23&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Systems&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9.00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6.90&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5.10&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4.15&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6.29&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Military&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5.60&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4.80&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3.80&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.10&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4.08&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Average&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;23.56&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13.71&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5.68&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3.19&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;11.54&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All estimation should be done using various techniques, ideally converging and reinforcing the appropriateness of each other, negating bias from any particular technique.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Despite producing fairly inaccurate results, early software sizing is possible and useful.  This is a nice supplement to formal estimation models and expert opinion for software estimates early in the lifecycle.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bibliography&quot;&gt;Bibliography&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;[1] Jones, &lt;em&gt;Estimating Software Costs: Bringing Realism to Estimating&lt;/em&gt;, 2007.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;2&quot;&gt;&lt;/a&gt;[2] QSM Function Point Languages Table, &lt;a href=&quot;http://www.qsm.com/resources/function-point-languages-table&quot;&gt;http://www.qsm.com/resources/function-point-languages-table&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;3&quot;&gt;&lt;/a&gt;[3] Mayes Consulting Function Point Conversion, &lt;a href=&quot;http://softwareestimator.com/IndustryData2.htm&quot;&gt;http://softwareestimator.com/IndustryData2.htm&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;4&quot;&gt;&lt;/a&gt;[4] Jones, &lt;em&gt;Software Engineering Best Practices&lt;/em&gt;, 2010.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;5&quot;&gt;&lt;/a&gt;[5] Jones, &lt;em&gt;Applied Software Measurement: Global Analysis of Productivity and Quality&lt;/em&gt;, 2008.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;6&quot;&gt;&lt;/a&gt;[6] Infosys, Practical Software Estimation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;7&quot;&gt;&lt;/a&gt;[7] Molokken, A Review of Surveys on Software Effort Estimation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;8&quot;&gt;&lt;/a&gt;[8] The Data &amp;amp; Analysis Center for Software (DACS), Fast Function Points Overview.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&quot;9&quot;&gt;&lt;/a&gt;[9] McConnell, &lt;em&gt;Software Estimation: Demystifying the Black Art&lt;/em&gt;, 2006.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Project Eueler in Groovy</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2012/11/10/groovy-project-euler.html</link>
        <pubDate>10/11/2012 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2012/11/10/groovy-project-euler.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://projecteuler.net/&quot;&gt;Project Euler&lt;/a&gt; is a great way to focus your skills on programming languages and techniques.  From the website:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Project Euler is a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve. Although mathematics will help you arrive at elegant and efficient methods, the use of a computer and programming skills will be required to solve most problems.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I used Groovy 2.0.5 to explore type safety in Groovy to solve practical programming problems.  For now, I will post a link to my &lt;a href=&quot;https://github.com/mperry/euler_groovy/tree/master/src/perry&quot;&gt;Grooy Project Eueler GitHub project&lt;/a&gt;, with analysis to come in the future.  Currently, I have completed the first ten programming problems.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Introduction to Dependent Types</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2012/11/09/dependent-types.html</link>
        <pubDate>09/11/2012 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2012/11/09/dependent-types.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dependent types are functions whose type depends on a value.  This comes in two forms:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the dependent product (&amp;prod;, Pi) whose return type is dependent on the argument&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the dependent sum (&amp;sum;, Sigma) whose argument type depends on the value of the first argument&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_dependent_product&quot;&gt;Dependent Product&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The dependent product generalises Arrow Types.  An example of the dependent product would be a function which, given a Natural number n, returns an array of Integers of size n.  This is written:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;prod; n: Natural . Array(Integer, n)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;where the return type is not dependent on the value of an argument, then it simplifies to the Arrow Type, &amp;prod; x: A . B, usually written A &amp;rarr; B, the subset of the cartesian product.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_dependent_sum&quot;&gt;Dependent Sum&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This types generalises the cartesian product where the type of the second component depends on the first.  To find the length of an array we might define:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;sum; n: Natural . Array(Integer, n) &amp;rarr; singleton(n)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;where singleton(n) is the Singleton Type.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_remarks&quot;&gt;Remarks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many programming languages have workarounds for not supporting depedent types.  This can appear as partial functions, metaprogramming and exceptions.  Dependent types allow arbitrary functions to describe a type, this makes type checking as hard as full program verification.  This is why dependent types are usually only found in languages used in program verification.  Due to Goedel&amp;#8217;s incompleteness theorem, not all functions can be known to be either true or false.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bibliography&quot;&gt;Bibliography&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;University of Colorado, Fundamentals of Programming Languages slides&lt;/em&gt;, &lt;a href=&quot;http://www.cs.colorado.edu/~bec/courses/csci5535-s09/slides/lecture25.6up.pdf&quot;&gt;http://www.cs.colorado.edu/~bec/courses/csci5535-s09/slides/lecture25.6up.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Why Dependent Types Matter&lt;/em&gt;, Altenkirch et al.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Intuitionistic Type Theory&lt;/em&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Intuitionistic_type_theory&quot;&gt;http://en.wikipedia.org/wiki/Intuitionistic_type_theory&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Coq Proof Assistant&lt;/em&gt;, &lt;a href=&quot;http://coq.inria.fr/&quot;&gt;http://coq.inria.fr/&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Types and Programming Languages&lt;/em&gt;, Pierce, section 30.5, Going Further: Dependent Types&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Howard-Curry Isomorphism&lt;/em&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence&quot;&gt;http://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Software Metrics</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2012/08/18/software-metrics.html</link>
        <pubDate>18/08/2012 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2012/08/18/software-metrics.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Capers Jones wrote the great book Applied Software Measurement.  This comprehensive book contains a wealth of information for the importance and use of metrics for estimation, project management, implementation, quality and customer satisfaction.  In this post I summarise a small number of important points he makes in chapter one (Introduction).  Full details can be found in the book with detailed exploration of the issues in later chapters.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_data_types&quot;&gt;Data Types&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Software measurement deals with three kinds of essential information:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hard data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Soft data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Normalised data&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_hard_data&quot;&gt;Hard data&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hard data can be quantified almost completely objectively.  High accuracy is possible and desirable.  Key metrics include:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Project personnel&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Effort on project tasks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Schedule elapsed time of tasks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Project documentation, code and test cases volume&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Defects found&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cost expended for each activity&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that due to unpaid overtime, costs incurred and hours of effort expended do not directly map.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Granularity must be fine enough to measure the effort for specific activities.  It is common to use the basic activities of requirements, design, code, test and installation.  However, this does not allow cost and benefit analysis of the various other activites and does not handle activities such as document that cross these boundaries.  See my post on &lt;a href=&quot;../../../2012/05/31/development-activities.html&quot;&gt;Development Activities&lt;/a&gt; for the various activities and typical effort percentages expended.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_soft_data&quot;&gt;Soft Data&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This category includes data where judgement is required, therefore perfect accuracy is not necessary.  This includes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Skill and experience of team&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Schedule pressures&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Requirements stability over time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;User satisfaction&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expertise and co-operation of users&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adequacy of project tools and methods&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Office space of team&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Business value to the organisation&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Soft data can be extremely useful to explain the differences in productivity and quality, leading to insights and possible improvements.  Care must be given to choosing the right factors and data collection mechanism.  This is the most technically difficult task of metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_normalised_data&quot;&gt;Normalised Data&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Standardised metrics used to compare projects&apos; productivity and quality.  This was formerly a longtime industry problem.  Lines of code (LOC) measurements typically ignored the different abstraction mechanisms available in programming languages and were therefore unsuitable for productivity measurements defined by the good or service produced per unit of expense.  Albrecht first produced function points at IBM and have largely replaced LOC as the preferred unit of measurement.  Function points are constant regardless of language used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The major factors that contribute to software productivity are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Size of applications&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Activities performed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Variations in the soft factors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The type of software developed&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To compare how the application type affects productivity consider the following data on the US productivity per application type in function points per staff month.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width:50%; &quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width:25%;&quot;&gt;
&lt;col style=&quot;width:25%;&quot;&gt;
&lt;col style=&quot;width:25%;&quot;&gt;
&lt;col style=&quot;width:25%;&quot;&gt; 
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Application Type&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1990&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1995&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2005&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;End-user&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;47.00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;52.00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;52.00&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Web&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;NA&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;12.00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;23.00&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MIS&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7.20&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7.80&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9.40&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Outsourced&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8.00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;8.40&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9.70&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Systems&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4.00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4.20&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6.80&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Commercial&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5.10&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5.30&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;7.20&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Military&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.00&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.80&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;3.75&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Average&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;10.47&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;13.07&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;15.98&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Average without end-user software&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;4.38&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6.58&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;9.98&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strategic_and_tactical_software_measurement&quot;&gt;Strategic and Tactical Software Measurement&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Corporate strategy concerns the overall business plan whilst tactics concerns the steps to achieve to strategy.  For measurement, strategic factors affect the entire organisation whilst tactical measurements concern projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../img/strategic-tactical-measurements.png&quot; alt=&quot;strategic tactical measurements&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_structure_of_full_software_measurement_system&quot;&gt;Structure of Full Software Measurement System&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A full measurement system will include productivity and quality measurements with monthly and annual reports.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../img/full-measurement-system.png&quot; alt=&quot;full measurement system&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_justification&quot;&gt;Justification&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For most companies that are not leading edge (e.g. Micrsoft, Google, IBM, etc.) measurements programs are exotic concepts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_value&quot;&gt;Value&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many project managers in organisations that do not measure productivity have a vested interest in not performing measurements.  They may suspect they performance will not be shown favourably and can obstruct progress.  Software measurement is a powerful defect prevention and removal activity.  Given quality is a significant factor is productivity it is perhaps not suprising that typical ROI is 17:1.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_costs&quot;&gt;Costs&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Annual costs for a large programme can be 4-6% of the software budget (2% for productivity, 2-3% for quality), certainly a significant budget expense.  However, the large sophisticated companies have the best record for project completion, user satisfaction, employee morale and employee satisfaction.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_typical_programme_sequence&quot;&gt;Typical Programme Sequence&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Operational measures - record key computer utilisation, downtime and response time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ongoing project measures - Monthly status reports on milestones and planned vs actual expenditure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Production library and backlog measures - The organisation&amp;#8217;s software investment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;User satisfaction measures - Interviews with users.  Forms and questionairres are also used, but less useful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Completed project measures - Function points of completed projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Soft factors - The right and wrong way a company does business.  Survey the methods, tools, skill, etc. on a project basis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Defect measures - Defect rates.  Rate of finding and fixing defects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Demographic measures - Annual demographic surveys of skills in the company relevant to company goals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Opinion survey - Staff opinion surveys, the greatest change to corporate culture.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The scientific method is the best method we know of to progress scientific and engineering work.  This requires measurement of current performance, performing a change and measuring the new, hopefully improved, performance.  Companies trying to improve without measurement fall prey to the typical fads and fortune of the software industry.  To progress software engineering as a true engineering discipline the software industry must learn to make and utilise measurements.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bibliography&quot;&gt;Bibliography&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;Jones, &lt;em&gt;Applied Software Measurement: Global Analysis of Productivity and Quality&lt;/em&gt;, Third Edition, 2008.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>New Leadership Competencies</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2012/08/06/leadership-competencies.html</link>
        <pubDate>06/08/2012 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2012/08/06/leadership-competencies.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;IT managers have an insatiable hunger for fadish, silver bullet, quick fix solutions to complex problems.  This understates and fails to understand the important of systems in accomplishing tasks.  Fighting against broken systems that actively hinder and demotivate teams is poison to highly effective and efficient organisatons.  Great running systems allows teams and individuals to do superb work they can be proud of.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Peter Scholtes&apos; book, &lt;a href=&quot;http://books.google.com.au/books/about/The_Leader_s_Handbook.html?id=_pPd2ssliiUC&amp;amp;redir_esc=y&quot;&gt;The Leader&amp;#8217;s Handbook: Making Things Happen, Getting Things Done&lt;/a&gt; describes the need to transform management and gives practical advice based on the work of Deming&amp;#8217;s systems thinking.  In this post I summarise chapter 2, &quot;The New Leadership Competencies&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All of the empowered, motivated, teamed-up, self-directed, incentivized, accountable, reengineered, and reinvented people you can muster cannot compensate for a dysfunctional system. When the system is functioning well, these other things are all just foofaraw. When the system is not functioning well, these things are still only empty, meaningless twaddle.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Scholtes
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://bks4.books.google.com.au/books?id=_pPd2ssliiUC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;imgtk=AFLRE73NTJkrjl1qYBe68v2oaT-TZUTXXTVwn54AJnhrWDomsnRWLD23g6x6t_0OzIZLPu5zd9TS3XMpAxdSTGBXiaxlTmuTyyJn8PS0_zG0SaPYYPLxKO36MgZgPOoyi45wNGeD_TXy&quot; alt=&quot;books?id= pPd2ssliiUC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;imgtk=AFLRE73NTJkrjl1qYBe68v2oaT TZUTXXTVwn54AJnhrWDomsnRWLD23g6x6t 0OzIZLPu5zd9TS3XMpAxdSTGBXiaxlTmuTyyJn8PS0 zG0SaPYYPLxKO36MgZgPOoyi45wNGeD TXy&quot; height=&quot;100px&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. The Leader&amp;#8217;s Handbook&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_old_competencies&quot;&gt;Old competencies&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Traditionally managers in organisations needed to have the following skills:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Forcefulness - Control the workforce, make people do the job, get people to respond to directions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Motivation - Inspire people to do great work.  Exhortation and motivation are the traditional carrot and stick.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decisiveness - Make quick decisions in the absence of information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Willfulness - Know what you want and pursue it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assertiveness - Be outspoken, don&amp;#8217;t show weakness or ignorance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Result and bottom line oriented - Hold people accountable for quotas, standards and measurable goals.  Maximise profits, decrease costs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Task oriented - Keep everyone busy, no slacking off.  Be the conscience and taskmaster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integrity and diplomacy - Be honest, fair and respectful.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These skills aren&amp;#8217;t wrong, just inadequate and less relevant than what they were.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_new_competencies&quot;&gt;New Competencies&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Deming&amp;#8217;s &quot;System of Profound Knowledge&quot; describes the new competencies for systems thinking.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The ability to think in terms of systems and knowing how to lead systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The ability to understand the variability of work in planning and problem solving.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Understanding how we learn, develop, and improve, and leading true learning and improvement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Understanding people and why they behave as they do.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Understanding the interdependence and interaction between systems, variation, learning, and human behavior. Knowing how each affects the others.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Giving vision, meaning, direction, and focus to the organization.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../img/deming_system.png&quot; alt=&quot;deming system&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The fact is that the system that people work in and the interaction with people may account for 90 or 95 percent of performance.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Deming
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The work of Deming had a profound influence on Japan afer World War 2.  In the IT world, Deming&amp;#8217;s work has inspired CMMI, Six Sigma, the PDCA cycle and &lt;a href=&quot;http://en.wikipedia.org/wiki/Lean_software_development&quot;&gt;lean software development&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>The Difficulty of Software Engineering</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2012/07/26/software-engineering-is-hard.html</link>
        <pubDate>26/07/2012 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2012/07/26/software-engineering-is-hard.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Software engineering is a difficult, complex and intellectually challenging discipline.  To discuss the challenges of software engineering and why it is hard we must first have a definition of software engineering as a basis for discussion.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_definition&quot;&gt;Definition&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Software_engineering&quot;&gt;Software engineering&lt;/a&gt; is that form of engineering that applies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a systematic, disciplined, quantifiable approach&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the principles of computer science, design, engineering, management, mathematics, psychology, sociology and other disciplines&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;innovation and inventiveness&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;to creating, developing, operating, and maintaining cost-effective, reliably correct, high-quality software solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_subfields&quot;&gt;Subfields&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The field of software engineering can then be decomposed as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Theory: mathematical theories, program verification, construction, derivation, generation, and transformation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Technology: the effectiveness of software tools&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Methodology: the effectiveness of systematic procedures&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Management: the effectiveness of managerial techniques to help people and groups of people produce quality software&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Production of software artifacts: the actual development of a particular instances of software&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All of the subfields are concerned with the production of quality software. All those involving tools, methods and techniques are concerned with effectiveness; it is illegitimate to claim they work unless demonstrated that they do so. The usage of opinion in substitute of demonstrated effectiveness is still a pervasive industry problem today.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;bq. &quot;The required techniques of effective reasoning are pretty formal, but as long as programming is done by people that don&amp;#8217;t master them, the software crisis will remain with us and will be considered an incurable disease. And you know what incurable diseases do: they invite the quacks and charlatans in, who in this case take the form of Software Engineering gurus.&quot; - Dijkstra&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_expert_opinion&quot;&gt;Expert Opinion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Software engineering &amp;#8230; is the part of computer science that is too difficult for the computer scientists.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; F.L. Bauer
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Donald_Knuth&quot;&gt;Donald Knuth&lt;/a&gt; (most famous for his landmark three volume encyclopedia of algorithms) explained at a 1989 keynote talk that one of the lessons learned from the ten year development of his TeX typesetting system is that &quot;software is hard&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What were the lessons I learned from so many years of intensive work on the practical problem of setting type by computer? One of the most important lessons, perhaps, is the fact that SOFTWARE IS HARD&amp;#8230;. From now on I shall have significantly greater respect for every successful software tool that I encounter. During the past decade I was surprised to learn that the writing of programs for TEX and for METAFONT proved to be much more difficult than all the other things I had done (like proving theorems or writing books). The creation of good software demands a significantly higher standard of accuracy than those other things do, and it requires a longer attention span than other intellectual tasks.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Knuth
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/4/4f/KnuthAtOpenContentAlliance.jpg/192px-KnuthAtOpenContentAlliance.jpg&quot; alt=&quot;192px KnuthAtOpenContentAlliance&quot; height=&quot;100px&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Donald Knuth&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Fred_Brooks&quot;&gt;Fred Brooks&lt;/a&gt;, famous for his &quot;No Silver Bullet&quot; paper in 1986 argued the complexity of programming can be divided into two groups:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;accidental: arising from the production of software&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;essential: inherent in the nature of the problem&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www-03.ibm.com/ibm/history/exhibits/builders/images/5406FXB.jpg&quot; alt=&quot;5406FXB&quot; height=&quot;100px&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Fred Brooks&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Accidental complexity can be addressed and resolved, e.g. the details of progamming in a lanuage.  However, essential complexity is caused by the specification, design and testing of the software abstraction.  The construction of the program and verification of the program to it&amp;#8217;s specification is accidental complexity.  Getting the abstraction right will always be hard with &lt;em&gt;no silver bullets&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The components of essential complexity are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Complexity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Conformity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Changeability&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invisibility&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_complexity&quot;&gt;Complexity&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Software is more complex than any other entity constructed by humans &quot;because no two parts are alike&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;bq. &quot;Good software practice mitigates against duplication of parts since two parts that are similar are collapsed into a single callable routine in which the differences have been parameterized. In other more physical, human-built entities (bridges, buildings, cars, computers, etc.) the most obvious characteristic is the repetition of parts.&quot; - Brooks&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Advances in mathematics are due to ignoring complexity not relevant to the problem at hand. In software, ignoring complexities yields an incomplete program that does not solve the original problem. Yes, abstraction is essential for the decomposition of software.  However, ultimately these ignored details must be considered. The complexity of software cannot be escaped.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_conformity&quot;&gt;Conformity&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whenever a software system is built, if anything needs to be bent to get the hardware, software, firmware, and peopleware to co-exist the software is that which changes.  Software is far more malleable than are hardware, firmware, and people. Hardware and firmware come with predetermined behavior, and the behavior of human users is limited.  Ultimately, the software is adapted to conform to the rest of the system.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_changeability&quot;&gt;Changeability&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Software is subject to change far more than other technology. Once delivered, computer hardware and buildings change infrequently. The cost of changes is too large to do so.  In practice, the cost of a change in software is high.  The cost of maintaining a program over its lifetime is more than the cost of developing it and due to ripple effects and coupling, the cost of making a minor change can be major.  However, a common  perception is that the cost to make small changes is small.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_invisibility&quot;&gt;Invisibility&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Brooks observes that &quot;software is invisible and unvisualisable&quot;. For objects with a geometric reality, such as buildings, diagrams are faithful, complete, and useful representations from which inconsistencies and omissions can be gleaned. Software has no physical reality. Apart from the source code itself, software has no complete representation. Diagrams only capture particular aspects of a system.  No set of diagrams captures all aspects of the system, their mutual &lt;em&gt;inconsistency&lt;/em&gt; almost assured.  Our ability to detect inconsistencies and omissions in them is limited.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There cannot be as dramatic an improvement in software simply because the human brain cannot be improved by the orders of magnitude that are required.  &lt;a href=&quot;http://www.smartplanet.com/blog/science-scope/scientists-figured-out-why-we-cant-get-smarter/9631&quot;&gt;Scientists know we cannot get smarter&lt;/a&gt;.  Progression is made by standing on the shoulders of giants and moving technology progressively forward.  Human brains can tame accidental complexity, but will always struggle with essential complexity.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_theorem_proving&quot;&gt;Theorem Proving&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It has been demonstrated by the &lt;a href=&quot;http://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence&quot;&gt;Howard-Curry isomorphism&lt;/a&gt; that programming is theorem proving and vice versa.  It is known that the existence of a program to satisfy a given specification is undecidable. Also undecidable is whether a program satisfies a given specification.  An algorithm cannot, in general, generate a program to satisfy a given specification. The existence of a program that satisfies a given specification can be demonstrated only by a special case proof.  Proving a theorem is exactly writing a program that meets a given specification.  Both are of equal formal difficulty.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wicked_problems&quot;&gt;Wicked Problems&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many problems addressed by software engineering are considered by many to be &lt;a href=&quot;http://en.wikipedia.org/wiki/Wicked_problem&quot;&gt;wicked problems&lt;/a&gt; with the following characteristics:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The problem&amp;#8217;s definition and solution must be carried out concurrently.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is no unique definition or unique solution for the problem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is always room for improvement in any problem definition and solution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The problem is complex because it is composed of many interrelated subproblems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The problem has not been solved before and is unlike any other that has been solved before. It thus requires new approaches, and the resulting solution is not likely to be applicable elsewhere.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Many parties with differing priorities, values, and goals have a stake in the prob-lem and its definition and solution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wicked problems defy formalization, if a formalization is available, it can be improved. It is unlikely that the formalization can build on the existing body of theory, and thus the formalization is built from the ground up for each new problem.  These properties make the work harder than that usually performed by mathematicians.  In many senses programming is harder than proving theorems, mainly because it often deals with problems that have yet to be formalized.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Software engineering, the use of mathematical ideas and abstractions, is different from more classical kinds of engineering, which work with physical substances and objects. Those differences are what make software so complex and software engineering so deep, interesting and intellectually challenging.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bibliography&quot;&gt;Bibliography&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;Boehm, &lt;em&gt;Software Engineering Economics&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Berry, &lt;em&gt;Academic Legitimacy of the Software Engineering Discipline&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brooks, &lt;em&gt;No Silver Bullet&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Principles of Team Motivation</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2012/07/12/motivation.html</link>
        <pubDate>12/07/2012 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2012/07/12/motivation.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Motivation drives much of human behaviour and is fundamental to creative behaviour.  Yet what is motivation and how can we motivate others?  Motivation is a deep and complex subject but we know enough about motivation, particularly for software teams.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_is_it&quot;&gt;What is it?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Motivation is an urge to act.  Maslow defines five levels of need:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Physical needs for survival, e.g. hunger and thirst&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Safety, security and comfort&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Emotional needs: belonging to a family or group, to be loved and cared for.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Esteem, recognition and respect for what we are&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Self actualisation, what we have done and it&amp;#8217;s impact, results and achievement rewarded by personal satisfaction&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Self actualisation is required for software engineering which must be consistently satisfied for outstanding work.  For this to occur, each of the lower levels must be satisfied.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../img/motivation_triangle.png&quot; alt=&quot;motivation triangle&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_goals&quot;&gt;Goals&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Goals are an important part of motivation.  The more important you believe the goal is the harder you will work to achieve the goal.  To reinforce the circle, the harder we work to achieve a goal, the more likely we will value achieving it.  In other words, the harder the journey the more we value the destination.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Developers work best when the ideas they hold are in agreement.  When ideas are in agreement they are consonant.  Conversely, when they disagree they are dissonant ideas, bringing discomfort due to the apparent disagreement.  Cognitive dissonance can be caused by management making demands that developers believe are not reasonable.  If management decides on a particular date that does not look reasonable, developers will not hold that as particularly important and not strive to achieve the date.  Whilst the team believes in the date the more important the date becomes and the more committed the team becomes!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_feedback&quot;&gt;Feedback&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feedback is the evidence collected that the team is on track to achieve it&amp;#8217;s goal.  Whilst evidence indicates we will achieve our goal the team will exert themselves to achieve it which reinforces team motivation.  Feedback is also important to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;identify strengths&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;identity areas of improvement&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;identity bias, arrogance or ignorance that impede improvement&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_sustaining_motivation&quot;&gt;Sustaining Motivation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Motivation is best maintained by giving frequent feedback of team progress against goals.  Distant goals are rarely motivating factors.  The teams needs to connect the many short term goals to the overall team goal.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_kinds_of_motivation&quot;&gt;Kinds of Motivation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are four different kinds of motivation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Intrinsic: attraction of the work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extrinsic: reward of doing the work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Personal: individual values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interpersonal: social influences.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previous studies have identified the top ten IT workers motivation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Challenge and responsibility&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flexibility&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A stable work environment&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compensation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Professional development&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Peer recognition&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stimulating colleagues and managers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exciting job content&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Organisational culture&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Location and community&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that money is fourth, clearly the vast majority are intrinsic.  Managers who want excellence must focus on the task itself and not external rewards.  Great people have high standards whose performance is not increased by external factors.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_intinsic_motivation&quot;&gt;Intinsic motivation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a manager, how do you appeal to intrinsic motivation?  You can tap into these factors:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;challenge&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;interest&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;learning&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;meaning - change the world&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;purpose - achieve something important&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;creative flow - intense absorption and pleasure from doing the work&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_extrinsic_motivation&quot;&gt;Extrinsic motivation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Types of extrinsic motivation are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;money&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fame and recognition&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;awards&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;praise and appreciation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;status and priviledge&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;opportunity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;obligations and deadlines&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bribes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;threats&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As politicians well know, threats can be an effective (but destructive) motivational tool.  Simply imply a team member&amp;#8217;s job may be under review if the task is not completed as instructed.  Whilst this is rarely a productive tactic, it will get a reaction, but probably not the one you want.  When management resorts to threats and fear developers move down the Maslov hierarchy.  This can induce protective and irrational behaviour.  For example, using measurements on the wrong metric often means developers optimise that metric to the detriment of overall team producitivy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Greed is the most common motivation used in the workplace.  Think salary increases and bonuses.  These reward systems require that a measurement system is constructed to calculate the reward.  However workplace performance is rarely simple enough for this to be successful and can often motivate counter productive behaviour.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Transactional leadership, where bonuses or more money is given, switches the objective from the accomplishment to the reward.  This substitutes greed for self actualisation.  People will try to maximise their reward for minimal effort.  This might sound like what you want, but it really isn&amp;#8217;t.  Rewarding developers by lines of code will mean programs suddenly need alot more lines to achieve than they did previously.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_personal_motivation&quot;&gt;Personal Motivation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What personal values does the person hold: generosity, success, authenticity, knowledge, security, pleasure, power, harmony, achievement?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_commitment&quot;&gt;Commitment&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A commitment is the promise to do something.  A person&amp;#8217;s desire to achieve the commitment is the primary continuing motivation, the exact level of motivation is primarily decided on how the commitment was made.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Two parties are generally involved in a commitment negotiation.  The buyer describes what is desired and attempts to convince the seller that the commitment is important and easy for them to meet.  The seller then offers a counter proposal.  This continues until they agree or break off negotiations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To reach agreement the seller must convince the buyer they have the expertise and experience to meet the commitment promised.  Consistently demonstrated performance leads to credibility.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the two parties reach an agreement, the seller must perform the agreed work.  The seller, in our case the development team, is expected to do what is required to fulfill the commitment.  Software engineering work often raises suprises and that costs time and money.  Often a Herculean effort is made to reach the goal where the developers are motivated by their commitment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Different people react differently to the commitments they make.  Some make extraordinary efforts to meet them whilst others seem to ignore them as soon as they are made.  What is interesting is that team commitments have greater motivational power than individual commitments.  When all members have participated in a commitment and the teams depends somewhat on each person, the entire team is highly motivated to reach the commitment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_building_motivation&quot;&gt;Building Motivation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To build a motivated, committed team, ensure the following four factors are satisfied:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Voluntary: Managers and leaders must ask for commitment, not dictate, browbeat or force them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Visible: Teams must negotiate their own commitments and that process must be transparent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Credible: They must be back with previous evidence and a plan on how the commitment will be met&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Owned: Those that do the work must make the plan and negotiate the commitment&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../img/motivation_elements.png&quot; alt=&quot;motivation elements&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_sustaining_motivation_2&quot;&gt;Sustaining Motivation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The element above form the basis of providing team motivation but you still need to periodically reinforce that commitment throughout the project.  Break the project into intermediate milestones that provide feedback.  Track progress at least weekly.  If the team begins to doubt the work is not achievable address the concern directly for their work will suffer.  Either provide evidence the plan is achievable, change the plan or renegotiate the work so that the new commitment is believed to be achievable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_bibliography&quot;&gt;Bibliography&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist bibliography&quot;&gt;
&lt;ul class=&quot;bibliography&quot;&gt;
&lt;li&gt;
&lt;p&gt;Drucker, &lt;em&gt;Management Challenges for the 21st Century&lt;/em&gt;, 1999.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Maslow, &lt;em&gt;Motivation and Personality&lt;/em&gt;, 1954.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Humphrey, &lt;em&gt;TSP - Leading a Development Team&lt;/em&gt;, 2006.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;McGuiness, &lt;em&gt;How to Motivate Creative People (Including Yourself)&lt;/em&gt;, 2009.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>The Groovy Type System</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2012/06/15/groovy-optional-typing.html</link>
        <pubDate>15/06/2012 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2012/06/15/groovy-optional-typing.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It seems timely to consider the type system of Groovy given the release of Groovy 2.0.0_rc3 and the impending final release of Groovy 2.0.0.  I introduced Grails into a client organisation, but at times there was some misunderstanding that Groovy (1.x) had an optional static type system.  This is not the case and is easily shown to be false.  Groovy has optional type annotations that are checked at runtime as terms are cast to the types in the type annotations.  Consider the following small program:&lt;/p&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;package mperry

class Test {

	def static main(def args) {
		new Test().test()
	}

	def test() {
		def a = 4
		String b = a
		println &quot;b = $b&quot;
		int c = this
		println &quot;c = $c&quot;

	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This progams compiles, but when run produces the following output&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;b = 4
Caught: org.codehaus.groovy.runtime.typehandling.GroovyCastException: Cannot cast object &apos;mperry.Test@198b8b57&apos; with class &apos;mperry.Test&apos; to class &apos;int&apos;
org.codehaus.groovy.runtime.typehandling.GroovyCastException: Cannot cast object &apos;mperry.Test@198b8b57&apos; with class &apos;mperry.Test&apos; to class &apos;int&apos;
	at mperry.Test.test(Test.groovy:13)
	at mperry.Test$test.call(Unknown Source)
	at mperry.Test.main(Test.groovy:6)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So what is happenning here?  The term for the variable this is attempted to be assigned to the variable c, declared to be of type int.  However the type of the term is Test, not int, hence the cast exception.  It is instructive to decompile the Java bytecode produced (using JD-GUI)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;package mperry;

import groovy.lang.GroovyObject;
import groovy.lang.MetaClass;
import org.codehaus.groovy.runtime.GStringImpl;
import org.codehaus.groovy.runtime.ScriptBytecodeAdapter;
import org.codehaus.groovy.runtime.callsite.CallSite;
import org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation;

public class Test
  implements GroovyObject
{
  public Test()
  {
    Test this;
    CallSite[] arrayOfCallSite = $getCallSiteArray();
    MetaClass localMetaClass = $getStaticMetaClass();
    this.metaClass = localMetaClass;
  }

  public static void main(String[] args)
  {
    CallSite[] arrayOfCallSite = $getCallSiteArray(); arrayOfCallSite[0].call(arrayOfCallSite[1].callConstructor($get$$class$mperry$Test()));
  }

  public Object test() {
    CallSite[] arrayOfCallSite = $getCallSiteArray(); Object a = (Integer)DefaultTypeTransformation.box(4);
    String b = (String)ScriptBytecodeAdapter.castToType(a, $get$$class$java$lang$String());
    arrayOfCallSite[2].callCurrent(this, new GStringImpl(new Object[] { b }, new String[] { &quot;b = &quot;, &quot;&quot; }));
    int c = DefaultTypeTransformation.intUnbox(this);
    return arrayOfCallSite[3].callCurrent(this, new GStringImpl(new Object[] { (Integer)DefaultTypeTransformation.box(c) }, new String[] { &quot;c = &quot;, &quot;&quot; })); return null;
  }

  static
  {
    __$swapInit();
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note the cast, both explicit (e.g. assigning to b) and implicit (assigning to c).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What is interesting is the introduction of option static typing and optional static compilation to Groovy 2, see &lt;a href=&quot;http://docs.codehaus.org/display/GROOVY/2012/05/07/Static+compilation+in+the+new+Groovy+2.0+beta&quot;&gt;here&lt;/a&gt;.  This introduces semantic issues in the interpretation of Groovy programs, i.e., the behaviour of the progam depends on the mode of compilation.  However, it does address the important flaw that Groovy was always very slow compared to Java.  With static compilation and the use of the invoke dynamic feature of JDK7, performance should now be comparable.  Yet I have a nagging doubt on the elegance and foundations of the language given the recent introduction of the type system and the fundamental dependence on Java&amp;#8217;s type system.  There are many benefits that Scala has over Groovy, including the type system and the considerable momentum behind Scala as the Java replacement in both industry and academia.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>State of Software Quality</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2012/06/07/state-of-software-quality.html</link>
        <pubDate>07/06/2012 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2012/06/07/state-of-software-quality.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Software quality is a key attribute of both successful and failed software projects.  Unfortunately this topic is not well understood by the majority of software engineers due to their education and training.  The video below by Capers Jones covers the factors that influence software quality including methodologies, tools, and staffing levels.  It covers empirical evidence on major quality approaches and other topics that can impact overall quality levels.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Statement of purpose:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Explain the state of the art of defect prevention and removal&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explain pre-test removal such as static analysis and inspections&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explain the economic value of achieving &amp;gt; 95% in defect removal efficiency&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explain the economic costs of dropping &amp;lt; 85% in defect removal efficiency&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explain the ROI of quality excellence&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;//www.youtube.com/embed/ahArM6TD2F8?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Development Activities Effort</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2012/05/31/development-activities.html</link>
        <pubDate>31/05/2012 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2012/05/31/development-activities.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Often the software development industry seems so fad oriented it is great to see some facts and evidence in books.  Capers Jones&apos; book, Applied Software Measurement, is stuffed with important and useful information, particularly if your organisation has yet to start a metrics effort.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;http://www.amazon.com/Applied-Software-Measurement-Analysis-Productivity/dp/0071502440&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51OPavuzBhL._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA300_SH20_OU01_.jpg&quot; alt=&quot;51OPavuzBhL. BO2,204,203,200 PIsitb sticker arrow click,TopRight,35, 76 AA300 SH20 OU01 &quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Much of software estimation is done by developer gut feel without knowledge of evidence, metrics and biases.  Having such basic information as the typical effort spent in various software development activities can guide you as a validation step in your project plans.  However, this information is hard to come by, particular if your organisation does not collect data.  The table on page 257 is great for a quick overview.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../img/development_activities_effort.png&quot; alt=&quot;development activities effort&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since development activities are dependent on the size and complexity of the project, Jones recommends to assume the project is 1500 function points.  Note that this table predicts the likely development activities and the percentage of effort spent on each one.  If your team is spending vastly different proportions than the industry average it begs the questions as to why this is the case?  The time spent thinking about this question is extremely valuable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Sum Types</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2012/05/18/sum-types.html</link>
        <pubDate>18/05/2012 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2012/05/18/sum-types.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many data structures involve different types of data, e.g. in a tree, nodes have children but leaves do not.  The type of the value determines the structure of the data.  These types are called sum types and include the binary sum (choice of two things) and the nullary sum (the choice of no things).  Finite sums generalise these cases to an arbitrary number in a finite set and have both an eager and lazy interpretation.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_nullary_and_binary_sum&quot;&gt;Nullary and Binary Sum&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width:80%; &quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width:25%;&quot;&gt;
&lt;col style=&quot;width:25%;&quot;&gt;
&lt;col style=&quot;width:25%;&quot;&gt;
&lt;col style=&quot;width:25%;&quot;&gt; 
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Element&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Abstract Syntax&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Conrete Syntax&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Typ t ::=&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;void&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;void&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;nullary sum&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;sum(t1;t2)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;t1+t2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;binary sum&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Exp e ::=&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;abort[t](e)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;abort(e)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;abort&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in[t1;t2][l](e)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;l.e&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;left injection&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;in[t1;t2][r](e)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;r.e&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;right injection&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;case(e; x1.e1; x2.e2)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;case e {l.x &amp;#8658; e1 or r.x &amp;#8658; e2}&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;case analysis&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The nullary sum has a choice of zero and therefore has no values.  The value abort(e) aborts the computation in the event that e evaluates to a value, which it cannot do.  A value can be drawn from the left or the right and we can discriminate on the two choices using case analysis.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_application&quot;&gt;Application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Unit - The type with just one element &amp;lt;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Void - The type with no elements, if e: void then e must not give a value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Booleans - Two state values&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enumerations - Case analysis over a finite set&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Options - The type containing no value or one value.  Nulls are commonly used to represent the Option type in object oriented languages.  Tony Hoare has talked about this being his &lt;a href=&quot;http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare&quot;&gt;billion dollar mistake&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Object oriented languages also often lack case analysis over finite sums, leaving the programmer to simulate this behaviour through the use of inheritance hierarchies.  However, this can force subclass specific methods to &lt;em&gt;bubble up&lt;/em&gt; to the top of the inheritance tree, violating type safety.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Product Types</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2012/05/17/product-types.html</link>
        <pubDate>17/05/2012 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2012/05/17/product-types.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The binary product of two types is the set of ordered pairs of those two types.  The values of the binary product is retrieved using projections, which select the first or second value in the pair.  The nullary product (or unit) type consists of the empty tuple of no values.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More generally, the finite product type are tuples indexed by a finite set of indices.  Special cases of the finite product type include:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;n-tuples where the indices i = {0, 1, &amp;#8230;, n - 1}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;labelled tuples (or records) indexed by symbols&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Products have both an eager and lazy interpretation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The syntax for nullary and binary products is described by the following grammar:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width:80%; &quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width:25%;&quot;&gt;
&lt;col style=&quot;width:25%;&quot;&gt;
&lt;col style=&quot;width:25%;&quot;&gt;
&lt;col style=&quot;width:25%;&quot;&gt; 
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Element&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Abstract Syntax&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Conrete Syntax&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Typ t ::=&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;unit&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;unit&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;nullary product&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;prod(t1;t2)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;t1 X t2&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;binary product&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Exp e ::=&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;triv&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&amp;lt;&amp;gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;null tuple&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;pair(e1;e2)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&amp;lt;e1, e2&amp;gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ordered pair&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;pr [l] (e)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;e.l&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;left projection&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;pr [ r ] (e)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;e.r&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;right projection&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the type of the index is the dependent sum type where an integer index is bounded to 0 &amp;lt;= i &amp;lt; n.  Where n = 0, the type of the index is empty, that is, it has no inhabitants.  Writing the indices explicitly in the tuple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;(i.0 -&amp;gt; t.0, i.1 -&amp;gt; t.1, ..., i.n - 1 -&amp;gt; t.n - 1)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;makes clear the association between the index and the element.  The indices can be represented as bounded integers or using unique labels so that the components of the tuple are more readable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Product types are the essence of structured data.  Common product types in programming languages includes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;functions with multiple arguments (a tuple with labels) or multiple results&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;objects represented as a set of functions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;structues, labelled tuples with mutable data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;arrays (a special tuple where the tuple has the same data type for each element)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given the product type is fundamental to programming, it is suprising so many languages have so little support for them!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Design By Contract Talk</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2012/05/01/design-by-contract.html</link>
        <pubDate>01/05/2012 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2012/05/01/design-by-contract.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I gave a talk on &lt;a href=&quot;http://www.meetup.com/qldjvm/events/55952912/&quot;&gt;Design By Contract to the Queensland JVM Group&lt;/a&gt; on April 10 2012.  Here is the summary:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Design by contract (DbC) is an approach for designing software using precise interface specifications for software components. These specifications primarily use preconditions, postconditions and invariants and act as a metaphor for the conditions and obligations of business contracts. In this talk, Mark will use Google&amp;#8217;s Contracts For Java library to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Explain DbC and it&amp;#8217;s benefits&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Demonstrate how DbC can be integrated into Java projects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explain DbC&amp;#8217;s relationship with testing and type theory&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;//player.vimeo.com/video/40274032&quot; frameborder=&quot;0&quot; webkitAllowFullScreen mozallowfullscreen allowFullScreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will endeavour to put the slides up in the next week.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>OO is anti-modular</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2012/02/16/oo-is-anti-modular.html</link>
        <pubDate>16/02/2012 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2012/02/16/oo-is-anti-modular.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Robert Harper, Professor of Computer Science at Carnegie Mellon University, recently posted about &lt;a href=&quot;http://existentialtype.wordpress.com/2011/03/15/teaching-fp-to-freshmen/&quot;&gt;replacing object-oriented (OO) programming with functional programming (FP) for first year students&lt;/a&gt;.  He states:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Object-oriented programming is eliminated entirely from the introductory curriculum, because it is both anti-modular and anti-parallel by its very nature, and hence unsuitable for a modern CS curriculum.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is widely understood how imperative programming&amp;#8217;s use of side effects is not suitable to concurrency and parallelism.  His anti-modular views are more interesting.  Note, he is not referring to &lt;a href=&quot;http://www.jcp.org/en/jsr/detail?id=277&quot;&gt;Java modularity in JSR277&lt;/a&gt;.  He is referring to ML style module systems; he co-wrote chapter eight &quot;Design Considerations for ML-Style Module Systems&quot; in &lt;a href=&quot;http://www.amazon.com/Advanced-Topics-Types-Programming-Languages/dp/0262162288&quot;&gt;Advanced Topics in Types and Programming Languages&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51zsCnON7eL._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA300_SH20_OU01_.jpg&quot; alt=&quot;51zsCnON7eL. BO2,204,203,200 PIsitb sticker arrow click,TopRight,35, 76 AA300 SH20 OU01 &quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this chapter, the basic modularity mechanisms are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;modules and signatures&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;namespace management&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;separate compiation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;inter-module type checking&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;principal signatures&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Informally, a module (or structure) is a collection of components, which may include procedure or function definitions, variable declarations, type definitions, and initialization code - specifics will vary from one language to another. A program consists of a collection of bindings of module names to modules. One module is specified as the root - the main entry point of the program.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One module in a program may refer to another by using the latter&amp;#8217;s name in an external reference. The occurrences of external references between modules determine a dependency ordering in which the referring module depends on the module to which it refers. (We assume for now that cyclic dependencies between modules are not allowed; 8.9 discusses relaxing this restriction.) The job of a linker is to compose a complete program by resolving external references, creating module bindings for each of the external references in the partial program under construction until no unresolved references remain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To support separate compilation, the dependency of one module on another is mediated by a signature (or interface) that describes the externally visible components of the latter module. A signature must be sufficiently expressive as to enable clients of a module to be compiled without reference to its implementation. This information typically includes type declarations for procedures and variables and the definitions of type variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In practice, most languages support modularity through a mixture of linguistic and extra-linguistic mechanisms. For example, modules are often organized as files, and module naming conventions are often tied to file system naming conventions. To avoid such complications, we concentrate on a module language that emphasizes the central concepts, relegating its realization in specific languages and development environments to informal discussions in 8.10.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&lt;cite&gt;Advanced Topics in Types and Programming Languages&lt;/cite&gt;&lt;br&gt;
&amp;#8212; Harper and Pierce
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the use of inheritance is problematic.  To reason about the behaviour of a class you have to know the behaviour of all superclasses and subclasses of the class.  This is because OO expects methods to be overwritten using late binding and subtype polymorphism.  This changes can ripple both up and down the class hierarchy, developers thus need to understand the entire hierarchy to make changes safely.  Thus class hierarchies across modules is anti-modular.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_references&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://lucacardelli.name/Papers/BadPropertiesOfOO.html&quot;&gt;Bad Engineering Properties of Object-Oriented Languages&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://homepages.inf.ed.ac.uk/stg/NOTES/node95.html&quot;&gt;Introducing Standard ML Modules&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://openjdk.java.net/projects/modules/&quot;&gt;Open JDK Modules&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jcp.org/en/jsr/detail?id=277&quot;&gt;JSR 277: JavaTM Module System&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.javabeat.net/articles/101-introduction-to-java-module-system-in-java-70-1.html&quot;&gt;Introduction to Java Module System in Java 7.0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.javaworld.com/javaworld/jw-08-2008/jw-08-java-modularity.html?page=1&quot;&gt;The case for Java modularity&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.pps.jussieu.fr/~gc/slides/classes.pdf&quot;&gt;Classes vs Modules&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.stanford.edu/class/cs242/slides/2007/objects-modules.ppt&quot;&gt;Modularity and Object-Oriented Programming&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://gbracha.blogspot.com.au/2011/06/types-are-anti-modular.html&quot;&gt;Types are Anti-Modular&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Quality Attributes</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2012/02/15/quality-attributes.html</link>
        <pubDate>15/02/2012 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2012/02/15/quality-attributes.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Software Quality Attributes are the benchmarks that describe a systems behavior within an environment. The quality attributes provide the means for measuring the fitness and suitability of a product. Software architecture has a profound affect on most qualities in one way or another and software quality attributes affect architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Architecture is critical to the realization of many qualities of interest in a system, and these qualities should be designed in and can be evaluated at the architectural level.  Architecture, by itself, is unable to achieve qualities. It provides the foundation for achieving quality, but this foundation will be to no avail if attention is not paid to the details.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_typical_qualities&quot;&gt;Typical Qualities&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Typical quality attributes include:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;System qualities: availability, modifiability, performance, security, testability and usability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Business qualities:  e.g. time to market.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Architectural qualities: e.g. conceptual integrity&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Other qualities not covered here include scalability, portability and interoperability.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_quality_attribute_scenarios&quot;&gt;Quality Attribute Scenarios&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These scenarios address a specific attribute for a requirement.  They include:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Source of stimulus - the entity (human, computer system, etc.) that generated the stimulus.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stimulus - a condition that needs to be considered when it arrives at a system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Environment - Condition of the system, e.g. running.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Artifact - The part of the system that is stimulated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Response - Activity undertaken after the arrival of the stimulus.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Response measure - How to measure the response so that the requirement can be tested.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../img/general_availability_scenario.png&quot; alt=&quot;general availability scenario&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_availability&quot;&gt;Availability&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Availability addresses system failure and the subsequent consequences.  This may involve how the system failure is detected, the frequency of failure, failure symptoms, system downtime, when failures may occur safely, failure prevention and failure notifications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;System availability is the probability a system is operational, defined by:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;mean time to failure / (mean time to failure + mean repair time)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Consider an availability general scenario:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Stimulus source.  Differentiate between internal and external symptoms&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stimulus&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;omission - A component fails to respond.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;crash - The component repeatedly suffers omission faults&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;timing - A component responds early or late.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;response - Responds with incorrect value.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Artifact - The resource required to be highly available, e.g. processor, process, disk, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Environment - The state of the system may affect the system response, e.g. after repeated faults, shutdown system&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Response - Reactions to stimulus, e.g. logging, notification, switch to degraded mode, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Response measure - How to measure the response, e.g. time to repair, availability percentage, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;General Availability Scenario Generation&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width:100%; &quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width:50%;&quot;&gt;
&lt;col style=&quot;width:50%;&quot;&gt; 
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Scenario Part&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Possible Values&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Source&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;internal or external&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stimulus&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;omission, crash, timing, response&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Artifact&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;System processors, communications channels, storage, processes&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Environment&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Normal, degraded&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Response&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Detect event then one or more of:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;record event&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;notify user or other systems&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;disable sources according to rules&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;make unavailable for period&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;continue operation in normal or degraded mode&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Response Measure&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Interval that the system must become available&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Availability time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Degraded mode interval&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Repair time&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_modifiability&quot;&gt;Modifiability&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The cost of a change, specifically:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What can change?   Functions, platform, environment, system qualities, capacity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Who makes the change and when?  This is commonly done to source code during implementation, but an end user or system admin could make a change.  Time phases could be: implementation, compile time, build, configuration, execution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width:100%; &quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width:50%;&quot;&gt;
&lt;col style=&quot;width:50%;&quot;&gt; 
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Scenario Part&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Possible Values&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Source&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;End user, developer, system admin&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stimulus&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Add/delete/modify/vary functionality, quality attribute or capacity&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Artifact&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;User interface, platform, environment, other system&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Environment&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Runtime, compile time, build time, design time, setup, configuration&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Response&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Places to be modified without other effect, test change, deployment&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Response Measure&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Cost in number of elements, effort, duration, money.  Extent the change affects other functionality or quality attributes&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_performance&quot;&gt;Performance&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The timing of events, interrupts, messages, user requests or the passage of time and the system response.  How long does this take?&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width:100%; &quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width:50%;&quot;&gt;
&lt;col style=&quot;width:50%;&quot;&gt; 
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Scenario Part&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Possible Values&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Source&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;One of multitude independent sources or within system&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stimulus&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Perdioc event, sporadic events, non-deterministic (stochastic) events&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Artifact&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;System&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Environment&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Normal or overloaded mode&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Response&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Processes stimuli, changes to level of service&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Response Measure&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Latency, deadline, throughput, jitter, miss rate, data loss&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For much of the history of software engineering, performance has been the dominant factor in system architecture, often at the expense of other qualities.  The commoditisation of hardware has meant other qualities are now serious competitors.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_security&quot;&gt;Security&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The ability to resist unauthorised usage.  Characterised by:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Non repudiation - The property that a transaction cannot be denied by any parties (e.g. disputing internet purchase you did make).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Confidentiality - Data or services are protected from unauthorised access.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integrity - Data or services delivered as intended (e.g. hacker has changed billing amount)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assurance - Transaction parties are who they claim (e.g. the email from the bank is actually from the back, not a fraudster)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Availability - The system is available for genuine use (e.g. denial of service brings down website)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Auditing - tracking of activities to later reconstruct them.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width:100%; &quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width:50%;&quot;&gt;
&lt;col style=&quot;width:50%;&quot;&gt; 
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Scenario Part&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Possible Values&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Source&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Individual or system that is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;correctly identified, identified incorrectly, unknown identity
who is:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;internal/external, authorised/unauthorised
with access to:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;limited or vast resources&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stimulus&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Display data, change/delete data, access service, reduce availability&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Artifact&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;System services, data&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Environment&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Online or offline, connected or disconnected, firewalled or open&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Response&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Authenticate user, hide identity, block access, allow access, grant/withdraw permission, record access, store data in format, unexplainable high demand, informs user or system, restricts availability&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Response Measure&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Time, effort or resources to circumvent with probability, probability of detecting attack, probability of identifying responsible party, services available in DOS attack, extent of damage, percentage of legitimate access denied&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_testability&quot;&gt;Testability&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The extent of the ease the software faults can be demonstrated.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width:100%; &quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width:50%;&quot;&gt;
&lt;col style=&quot;width:50%;&quot;&gt; 
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Scenario Part&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Possible Values&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Source&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Unit tester, integration tester, system tester, client acceptance tester, user&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stimulus&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Analysis, architecture, design, class, integration, delivery&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Artifact&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Design, code, application&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Environment&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Development time, design time, compile time, deploy time&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Response&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Access state values, computes values, prepare test environment&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Response Measure&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Percent of statements executed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Probability of failure if a fault exists&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Time to perform tests&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Time to prepare test environment&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_usability&quot;&gt;Usability&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The ease to perform a task and user support:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Time to learn&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Time to perform task efficiently&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Impact of errors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;User customisation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Confidence that correct action was taken&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all&quot; style=&quot;width:100%; &quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width:50%;&quot;&gt;
&lt;col style=&quot;width:50%;&quot;&gt; 
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Scenario Part&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Possible Values&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Source&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;End user&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Stimulus&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Learn system features, use system efficiently, minimise error impact, adapt system, feel comfortable&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Artifact&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;System&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Environment&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Runtime or configuration time&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Response&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Learn features - context sensitive help, familiar interface, usable interface in unfamiliar context&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use system efficiently - Aggregation of data or commands, reuse of data/commands, interface navigation, distinct views with consistent operations, searching, simultaneous tasks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Minimise error impace - undo, cancel, recover, correct user error, retrieve password, verify resources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comfort - Display system state, work at users pace&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Response Measure&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Task time, number of errors, number of problems solved, user satisfaction, gain of user knowledge, ratio of successful operations, amount of time/data lost&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_business_qualities&quot;&gt;Business qualities&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Often business qualities goals can affect a system architecture:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Time to market&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cost and benefit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System lifetime&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Target market&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rollout schedule - base functionality of first release, enhancements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integration with other systems&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_architectural_qualities&quot;&gt;Architectural Qualities&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Qualities that related directly to the architecture:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Conceptual integrity - the architecture should do similar things in similar ways&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Correctness and completeness&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Buildability - can be made by the team in a timely manner&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The system quality attributes described are those commonly addressed by software architecture.  By using attribute scenarios one can understand the way these attributes can affect the architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Java Pain Points</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2012/02/01/java-pain-points.html</link>
        <pubDate>01/02/2012 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2012/02/01/java-pain-points.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java has been declared either dead or dying multiple times thoughout it&amp;#8217;s life.  For Java programmers unaware of the debate, this can be very disconcerting.  I have used Java for the majority of my programming life and from my observations Java programmers are ignorant of other languages.  However, great Java programmers are the languages loudest critics, but what are the harshest Java pain points?&lt;/p&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Explicit typing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generic type erasure&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lambdas&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tail recursion&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Contracts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continuations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Meta-programming&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Limited obvious types&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lack of unified type system&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Immutability&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Laziness&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pattern matching&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Boilerplate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Concurrency&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multiple inheritance&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_explicit_typing&quot;&gt;Explicit Typing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dynamic/static typing and &lt;a href=&quot;http://en.wikipedia.org/wiki/Type_inference&quot;&gt;type inference&lt;/a&gt; are often confused.  Statically typed languages &lt;em&gt;can&lt;/em&gt; have type inference (e.g. Scala, Haskell and to a limted extent C#).  We have known about the Hindler-Milner type inference algorithm since 1969 (43 years) yet very few statically typed languages have type inference.  I predict this will gain more attention in the coming years.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_generic_type_erasure_reification&quot;&gt;Generic Type Erasure (Reification)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The problem with generic type erasure is shown nicely in Josh Bloch&amp;#8217;s book &lt;a href=&quot;http://www.amazon.com/Effective-Java-Programming-Language-Guide/dp/B003D3OFRA&quot;&gt;Effective Java&lt;/a&gt; (Chapter 5 - Generics).  Since arrays are erroneously covariant instead of invariant, generics should be used to improve your code for (weak) type safety.  Some problems with generics:
* Calling a method with a generic argument defaults the type of the argument to Object at runtime, calling a method that the programmer did not expect
* Cannot create objects of the generic type
* Others&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51FKSNAV2GL._BO2,204,203,200_PIsitb-sticker-arrow-click,TopRight,35,-76_AA300_SH20_OU01_.jpg&quot; alt=&quot;51FKSNAV2GL. BO2,204,203,200 PIsitb sticker arrow click,TopRight,35, 76 AA300 SH20 OU01 &quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_lambdas&quot;&gt;Lambdas&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lambdas are coming to Java in version 8 (as of today, due mid 2013).  This will help ease generic programming in Java and the verbosity when using anonymous inner classes for simple function callbacks.  This is explained reasonably in this InfoQ article &lt;a href=&quot;http://www.infoq.com/articles/lambdas-java-analysis&quot;&gt;Lambas in Java: An In-Depth Analysis&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_tail_recursion&quot;&gt;Tail Recursion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Tail_call&quot;&gt;Tail recursion&lt;/a&gt; and tail call optimisation (TCO) are critical for functional programming and eliminating the repetition involved in loops (replace with maps and folds).  The Scala compiler converts tail calls to loops using TCO.  I have yet to see plans to include tail recursion in the JVM, but there seems to be some active research into how this can be done.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_contracts&quot;&gt;Contracts&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java has just the simple assert mechanism.  Support for &lt;a href=&quot;http://en.wikipedia.org/wiki/Design_by_contract&quot;&gt;Design by Contract&lt;/a&gt; used to be in the &lt;a href=&quot;http://bugs.sun.com/bugdatabase/top25_rfes.do&quot;&gt;top 10&lt;/a&gt; (actually second) most requested features, however the &lt;a href=&quot;http://bugs.sun.com/view_bug.do?bug_id=4449383&quot;&gt;request for enhancement 4449383&lt;/a&gt; seems to have been closed.  Thinking broadly; proofs, types, contracts and unit tests have the following relationship to a program:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Proofs &amp;#8658; General and strong theorems produced statically (but hard to prove and expensive to do)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Types &amp;#8658; General but weak theorems (usually checked statically)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Contracts &amp;#8658; General and strong theorems, checked at run time for particular instances (can be turned on or off)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unit testing &amp;#8658; Specific and strong theorems, checked quasi-statically on interesting cases&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These theorems are not well integrated in programming languages (presenting research opportunities).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_continuations&quot;&gt;Continuations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Continuation&quot;&gt;Continuations&lt;/a&gt; would make web programming dead simple.  Just restore the state and continue the computation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_meta_programming&quot;&gt;Meta-programming&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Poorly supported in Java, particularly compared to the dynamically typed languages Lisp, Erlang, Ruby, Groovy, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_limited_obvious_types&quot;&gt;Limited obvious types&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Java Date and Time API is a mess.  Sure we can use Joda-Time until JSR 310 gets released (perhaps in Java 8), but this is a fundamental language type and it should be in the core library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The double type is a poor implmentation of the decimal type &lt;a href=&quot;http://en.wikipedia.org/wiki/Decimal_floating_point&quot;&gt;IEEE 754&lt;/a&gt;.  Consider the Java program below which shows mutliples of 0.1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;package mperry;

public class DoublePrecision {

    public static void main(String[] args) {
        final int max = 20;
        final double multiplier = 0.1;
        final int wrap = 10;
        for (int i = 0; i &amp;lt; max; i++) {
            double d = i * multiplier;
            if (i % wrap == 0) {
                System.out.println();
            }
            System.out.print(i + &quot;: &quot; + d + &quot; &quot;);
        }
        System.out.println();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which produces the following output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;0: 0.0 1: 0.1 2: 0.2 3: 0.30000000000000004 4: 0.4 5: 0.5 6: 0.6000000000000001 7: 0.7000000000000001 8: 0.8 9: 0.9
10: 1.0 11: 1.1 12: 1.2000000000000002 13: 1.3 14: 1.4000000000000001 15: 1.5 16: 1.6 17: 1.7000000000000002 18: 1.8 19: 1.9000000000000001&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also missing is simple tuples (see Python) and the Option type (for type safe handling of nulls - no more NullPointerException - &lt;strong&gt;EVER&lt;/strong&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_unified_type_system&quot;&gt;Unified Type System&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Java type system is a hodge-podge of different abstractions that lacks an elegant, unified model.  You need to work with arrays, classes and primitives.  Compare this to Scala&amp;#8217;s type system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;../../../img/scala_classhierarchy.png&quot; alt=&quot;scala classhierarchy&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java arrays are a pain to work with and are unfortunately covariant.  Primitves have to be boxed and unboxed and interact strangely with var args and generics.  Ugly!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_immutability&quot;&gt;Immutability&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Java uses the final keyword to indicate immutability.  There are a few problems with this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Immutability should be the default.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For objects, the immutability only applies to the reference, not the instance variables it contains.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thus there is no way to indicate this a method is pure (is &lt;a href=&quot;http://en.wikipedia.org/wiki/Referential_transparency_%28computer_science%29&quot;&gt;referentially transparent&lt;/a&gt;).  Even C++ could indicate this with it&amp;#8217;s const keyword.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_laziness&quot;&gt;Laziness&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Laziness in programming languages is really useful.  From wikipedia on &lt;a href=&quot;http://en.wikipedia.org/wiki/Lazy_evaluation&quot;&gt;lazy evaluation&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Performance increases due to avoiding unnecessary calculations and avoiding error conditions in the evaluation of compound expressions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The capability of constructing potentially infinite data structures&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The capability of defining control structures as abstractions instead of as primitives.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&amp;#8212; Wikipedia
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Without referential transparency, I don&amp;#8217;t see how it can ever include lazy evaluation without building this into the language primitives, ala &lt;a href=&quot;http://en.wikipedia.org/wiki/Short-circuit_evaluation&quot;&gt;short circuit evaluation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_pattern_matching&quot;&gt;Pattern matching&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I don&amp;#8217;t mean regular expression pattern matching, but &lt;a href=&quot;http://apocalisp.wordpress.com/2009/08/21/structural-pattern-matching-in-java/&quot;&gt;structural pattern matching using algebraic data types&lt;/a&gt;.  Commonly the Interpreter and Visitor pattern is used to simulate pattern matching, but this gets ugly - fast!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_boilerplate&quot;&gt;Boilerplate&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This can involve:
* automatic resource management (see &lt;a href=&quot;http://www.oracle.com/technetwork/articles/java/trywithresources-401775.html&quot;&gt;Better Resource Management with Java SE 7: Beyond Syntactic Sugar&lt;/a&gt;)
* properties (see &lt;a href=&quot;http://projectlombok.org/&quot;&gt;Project Lombok&lt;/a&gt;)
* missing list and map literals (note: this is now available in Java 7)
* poor data representation that results in reams of XML configuration
* others?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_concurrency&quot;&gt;Concurrency&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The fork/join framework is a step in the right direction, but still dominant is the lock/semaphore/monitor paradigm created in the 60s over 40 years ago.  How many people are sure their concurrent code is correct in all situations?  Software transactional memory implementations look like they &lt;a href=&quot;http://en.wikipedia.org/wiki/Software_transactional_memory#Java&quot;&gt;exist in Java&lt;/a&gt;, but I have not tried any myself.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_multiple_inheritance&quot;&gt;Multiple inheritance&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eiffel did this right, but C++ created nightmares with diamond inheritance which tainted the entire concept.  Scala seems to be bringing this back in a limited way with traits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&amp;#8230;and I haven&amp;#8217;t even mentioned the modularity coming in Java 8.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_references&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A few references that I thought made good reading:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://codemonkeyism.com/java-dead/&quot;&gt;Is Java dead?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.25hoursaday.com/CsharpVsJava.html#conclusion2k7&quot;&gt;A comparison of Microsoft&amp;#8217;s c# programming language to Sun Microsystems&apos; Java programming language&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.slideshare.net/jeffz/why-java-sucks-and-c-rocks-final&quot;&gt;Why Java Sucks &amp;amp; C# Rocks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Beyond-Java-Bruce-Tate/dp/0596100949&quot;&gt;Beyond Java&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cis.upenn.edu/~bcpierce/types/archives/1988/msg00042.html&quot;&gt;Hindler email archive on history of type inference algorithm&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.enotes.com/topic/Type_inference&quot;&gt;Layman&amp;#8217;s type inference&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Edsger Dijkstra</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2012/01/30/dijkstra.html</link>
        <pubDate>30/01/2012 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2012/01/30/dijkstra.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/d/d9/Edsger_Wybe_Dijkstra.jpg/225px-Edsger_Wybe_Dijkstra.jpg&quot; alt=&quot;225px Edsger Wybe Dijkstra&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Recently I watched a really interesting video regarding Dijkstra called &lt;a href=&quot;https://www.youtube.com/watch?v=EL97C8C53ZM&quot;&gt;Discipline in Thought&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;videoblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;iframe src=&quot;//www.youtube.com/embed/EL97C8C53ZM?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Among the domains in which his scientific contributions are fundamental are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;algorithm design&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;programming languages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;program design&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;operating systems&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;distributed processing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;formal specification and verification&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;design of mathematical arguments&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which got me thinking who perhaps are the greatest computer scientists of all time?  My list would be:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Charles Babbage, 1791 - 1871&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alan Turing, 1912 - 1954&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;John von Neumann, 1903 - 1957&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edsger Dijkstra, 1930 - 2002&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Donald Knuth, 1938 - current&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whilst the first three are responsible for establishing the computer industry, Dijkstra and Knuth are probably the greatest of the industrial era (post World War 2), computer science&amp;#8217;s founding generation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have stated skim reading some of his writings from the University of Texas archive of &lt;a href=&quot;http://www.cs.utexas.edu/users/EWD/welcome.html&quot;&gt;Dijkstra&amp;#8217;s writings&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Among the great quotes from the video:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Computer science is no more about computers than astronomy is about telescopes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The competent programmer is fully aware of the limited size of his own skull. He therefore approaches his task in full humility and avoids clever tricks like the plague.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We should not introduce errors through sloppiness but systematically keep them out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Program testing can convincingly show the presence of bugs but it is hopelessly inadequate to show their absence.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Elegance is not a dispensable luxury but a factor that decides between success and failure.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am endeavouring to finding the time to read more of his many writings, primarily for clarity of thought, writing style and content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To contrast what seems to be the hacker culture, I leave you with this quote.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;em&gt;
I mean, if 10 years from now, when you are doing something quick and dirty, you suddenly visualize that I am looking over your shoulders and say to yourself &quot;Dijkstra would not have liked this&quot;, well, that would be enough immortality for me.
&lt;/em&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;attribution&quot;&gt;
&lt;cite&gt;EWD 1213: Introducing a course on calculi&lt;/cite&gt;&lt;br&gt;
&amp;#8212; Dijkstra
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://lemonodor.com/images/dijkstra-quick-n-dirty-s.jpg&quot; alt=&quot;dijkstra quick n dirty s&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Making the Case for Organisational Improvement</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2012/01/30/organisational-improvement.html</link>
        <pubDate>30/01/2012 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2012/01/30/organisational-improvement.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many engineers feel debilitated and enfeebled by autocratic managers, lacking the power and authority to make meaningful changes to their development practices.  Assuming you can get some management support for the idea of organisational improvement and get their ear, how do you make the strategic and tactical case for improvement?&lt;/p&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Regardless of the change proposed (process, language, tool, etc) the generic case for improvement of any type consists of:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Clearly define what you propose.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Understand today&amp;#8217;s business environment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Identify the executive&amp;#8217;s current hot buttons.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make an initial sanity check.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start the plan with two or three prototypes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Estimate the one-time introduction costs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Determine the likely continuing costs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Document the available experience data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Estimate the expected savings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decide how to measure the actual benefits.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Determine the improvement&amp;#8217;s likely impact on the executive&amp;#8217;s current key concerns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Identify any other ways that the proposed improvement could benefit the business.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Produce a presentation to give this story clearly and concisely.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_define_the_proposal&quot;&gt;Define the Proposal&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Define what you want the manager to do.  Write an implementation plan; this will force you to produce a clear statement of what the intended actions are.  Show the plan to others you trust to spot the defencies and improve the plan.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_understand_the_business_environment&quot;&gt;Understand the business environment&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The case must depend and reflect the business environment and the current priorities.  Learn what is happening in the business.  If the business just lost a major customer, obviously now may not be a good time to propose an expense, regardless of the perceived benefits.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_identify_the_hot_buttons&quot;&gt;Identify the hot buttons&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What is the manager and their management chain most concerned about?  Check the companies talks, press releases, statements and announcements.  Executives will push at every opportunity their highest priorities.  This could be development time, market growth or profitability.  Make sure their topic of concern is addressed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_improvement_sanity_check&quot;&gt;Improvement sanity check&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gather as much data as reasonable about the costs and benefits involved.  Does the improvement addressed the manager&amp;#8217;s key concerns?  If so, cost may not be the key concern.  If so, cost savings may need to be large enough to justify implementation.  Some numbers I have read, 200% savings is impressive whilst 25% is subject to very close scrutiny.  These ROI percentages may sound high, but proposals usually exaggerate the benefits and have hidden costs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_prototype_introduction&quot;&gt;Prototype introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Start small with a prototype test to minimise costs and maximise the chances of success.  Changes that affect behaviour are unlikely to be easy and will likely need to overcome resistance.  Identify problems before the prototype begins to eliminate missteps before they occur and provide training where necessary.  Be careful that your prototype is not cancelled or redirected.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_introduction_costs&quot;&gt;Introduction costs&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There will be initial introductory costs and ongoing costs.  Don&amp;#8217;t underexagerate these or your credibility may be damaged.  Identify both the protoype costs and total costs.  Allow both management time and training time for developers; this can be very significant.  Outside consultants or experts may be required and this cost can be very significant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Your argument will be judged by it&amp;#8217;s weakest link.  If there is an error or underestimate the assumption will probably be made that other errors exists in your case.  If you don&amp;#8217;t have the information you need, find someone who does.  Don&amp;#8217;t make unsupported assumptions; they will be found and you will be discredited.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_continuing_costs&quot;&gt;Continuing costs&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ongoing costs can include staff turnover, staff growth and expert assistance.  Be completely transparent and honest - hidden costs are usually found and assumed to be even greater than what they will be.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_benefits&quot;&gt;Benefits&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How long will it take to recover costs and how will the improvement address management&amp;#8217;s concerns?  If the case pays for itself the rest will be gravy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To make the cost case gather data on the improvement benefits.  This is difficult; costs are easier to prove than savings.  Good managers know this; much of management time is spent justifying changes.  I am told that an ironclad case is not required, as long as there is a logical story that is complete and realistic.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_improvement_experience&quot;&gt;Improvement experience&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is hard to find good, statistical valid studies on improvement benefits, many rely on anecdotal evidence.  Perhaps someone in the industry has implemented the changes described.  You may be able to emphasise the results achieved by your competitors.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_savings&quot;&gt;Savings&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cost savings can be achieved by:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Eliminating defects early in the process&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reducing defects going into test to shorten test time&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Savings can be hard to prove, both in advance and after the fact.  Good evidence is if a competitor cut test time by x% or customer reported defects by y%.  From there you can derive the savings involved in your company.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_benefits_2&quot;&gt;Benefits&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Identify how the prototype(s) will measure improvement benefits.  This may be dificult if you do not currently collect data on your current performance.  The plan may be a raging success, but how will this be demonstrated to others?  Think about how to handle this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What can you measure if there is no data?  Usually you can find out the development time, the schedule slippage, defects in system or integration test or productivity (dev time / lines of code).  Obtain a number of measures to boost your argument.  You can probably find this data from project management or accounting systems.  Find this data before the proposal to justify your proposal and identify how the benefits will be measured and demonstrated.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_other_benefits&quot;&gt;Other benefits&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Not all improvement must be cost justified.  Schedule accuracy, schedule predictability or cycle time could make your company more competitive.  Demonstrate it is good for business and will pay for itself.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_credits&quot;&gt;Credits&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post was inspired by a discussion at the &lt;a href=&quot;http://www.bfpg.org&quot;&gt;Brisbane Functional Programming Group&lt;/a&gt; on the introduction of functional programming to organisations, the benefits, costs and overcoming resistance.  However the strucuture of improvement proposals are generic.  The structure of this post was taken from the Watts Humphrey column, &quot;Making the Strategic Case for Process Improvement&quot;.  Much of the content has been paraphrased and rewritten.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Bugs vs Defects</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2012/01/28/bugs-vs-defects.html</link>
        <pubDate>28/01/2012 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2012/01/28/bugs-vs-defects.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve had quite a few people ask me why I refer to software issues as defects instead of the almost ubiquitously used term &quot;bugs&quot;.  This was inspired by the writing of Watts Humphrey, in particular his book &lt;a href=&quot;http://www.amazon.com/Discipline-Software-Engineering-Watts-Humphrey/dp/0201546108&quot;&gt;A Discipline For Software Engineering&lt;/a&gt; (1995) which has since been superceded by &lt;a href=&quot;http://www.sei.cmu.edu/library/abstracts/books/0321305493.cfm&quot;&gt;PSP: A Self-Improvement Process for Software Engineers&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://ecx.images-amazon.com/images/I/414H064YW2L._SL500_AA300_.jpg&quot; alt=&quot;414H064YW2L. SL500 AA300 &quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we call issues bugs it brings to mind insects slowly creeping into our software where they are not welcome.  We frequently tolerate bugs (insects) in our lives, so having a few bugs in software also seems tolerable.  However if we give these issues a term with a negative connotation, such as time bombs or land mines, the situation suddenly seems alot more urgent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Why are defects more like explosive devices than bugs?  Not all defects will explode in your face, but some will.  They may not be fatal, but chances are they will do alot of damage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By calling issues defects it encourages developers to take accountability for both their own and their organisations mistakes that created the defective software.  This puts them in a position to take control of the software process and develop correct software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Defects should not be thought of as minor inconveniences that will be fixed later, caught be the compiler or found in testing.  We know from statistical gathering that the best way to prevent and remove defects is at the time they occur and other techniques find but a small portion of defects.  Testing, for example, typically only finds 35-40% of defects.  If you rely on testing alone for software quality, you aren&amp;#8217;t going to find many defects and your time in UAT and production for finding and fixing defects will balloon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Miriam Webster dictionary defines &lt;a href=&quot;http://www.merriam-webster.com/dictionary/defective&quot;&gt;defective&lt;/a&gt; as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;em&gt;
a : imperfect in form or function : faulty, &quot;a defective pane of glass&quot;
&lt;/em&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the best description of our software and reflects the potential serious issues defective software can cause.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Fast Software Sizing</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2012/01/02/software-estimation.html</link>
        <pubDate>02/01/2012 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2012/01/02/software-estimation.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I recently read the excellent book Software Engineering Best Practices (2010) by Capers Jones and was impressed with the usefulness and practicality of fast software sizing based on pattern matching.  It relies on the many thousands of applications that already have function point size data available.  By categorising these existing applications in a number of properties similar, yet to be constructed, applications can be sized by comparing the intended application to those with similar patterns.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- more --&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The properties are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;nature&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;scope&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;type&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;problem complexity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;code complexity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;data complexity&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This taxonomy is copyrighted and is including in Applied Software Measurement by Capers Jones.  Each property is not assigned the same weight and at the time the book was written was included in a patent application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What is included in the book is information based on the scope property that then needs to be scaled based on the other properties.  The base scopes are (function point size in parentheses):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Algorithm (1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Subroutine (5)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Module (10)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reusable module (20)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disposable prototype (50)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Evolutionary prototype (100)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Subprogram (500)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stand-alone program (1K)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System component (2.5K)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System release (5K)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New departmental system (10K)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New corporate system (50K)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New enterprise system (100K)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New national system (250K)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New global system (500K)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This information can be used well before the applications requirement have begun.  Included in the book are 150 sample application sizes based on pattern matching, of which I have included some below (again, function point size in parentheses):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Star wars missile defence (350K)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oracle (310K)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;US air traffic control (306K)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SAP (296K)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Microsoft Vista (157K)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Microsoft Office Professional (93K)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Airline reservation system (38K)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data warehouse (21K)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Skype (21K)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Apple iPhone (19K)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux (17K)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Motor vehicle registrations (10K)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DNA analysis (6K)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Norton anti virus (2K)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cochlear implant (1K)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instant messaging (680)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Denial of service virus (140)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Caution should be used when applying pattern matching to size software.  This technique is still fairly experimental and may need tweaking.  Also required is an examination of a large sample of projects already completed with standardised function point counts.  The author examined several hundred projects using this technique.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Regardless, this information can be used to create a rough estimate on the function point size of the application and using a function point to lines of code table (e.g. &lt;a href=&quot;http://www.qsm.com/resources/function-point-languages-table&quot;&gt;http://www.qsm.com/resources/function-point-languages-table&lt;/a&gt;) one can quickly estimate the size of a proposed application, along with a potential cost (in man months) and schedule.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Related, static analysis tools that produce LOC counts are a source of function point sizing that may confirm these initial estimates.  The open static analysis tool Sonar has a site called Nemo for analysing open source projects (&lt;a href=&quot;http://nemo.sonarsource.org/&quot;&gt;http://nemo.sonarsource.org/&lt;/a&gt;).  JDK7 is the largest project analysed with 1.14 million LOC.  Using a Java conversion rate of 53 LOC per function point gives the size of this project as 21.5K function points.  This estimates that JDK7 is around the same size as Skype, the iPhone and Linux.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
      <item>
        <title>Initial Test</title>
        <author>Mark Perry</author>
        <link>http://mperry.github.io2011/10/19/test.html</link>
        <pubDate>19/10/2011 12:00:00 AM</pubDate>
        <guid isPermaLink="false">2011/10/19/test.html</guid>
        <description>
          &lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is my first post to test my blog.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
        </description>
      </item>
  </channel> 
</rss>
